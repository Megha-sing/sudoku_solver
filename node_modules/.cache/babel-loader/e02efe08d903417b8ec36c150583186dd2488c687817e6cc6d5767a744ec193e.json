{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\nconst generateSudoku = (difficulty = \"medium\") => {\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  // Difficulty to number of filled cells mapping\n  const fillsByDifficulty = {\n    easy: 35,\n    medium: 25,\n    hard: 15\n  };\n  const fills = fillsByDifficulty[difficulty] || 25;\n  let attempts = 0;\n  while (attempts < fills) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      attempts++;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\n\n// Checks if cell is valid (no Sudoku rule violations)\nconst isCellValid = (grid, row, col) => {\n  const val = grid[row][col];\n  if (val === 0) return true; // empty is always valid\n\n  // Check row and column\n  for (let i = 0; i < 9; i++) {\n    if (i !== col && grid[row][i] === val) return false;\n    if (i !== row && grid[i][col] === val) return false;\n  }\n\n  // Check 3x3 box\n  const boxRowStart = 3 * Math.floor(row / 3);\n  const boxColStart = 3 * Math.floor(col / 3);\n  for (let r = boxRowStart; r < boxRowStart + 3; r++) {\n    for (let c = boxColStart; c < boxColStart + 3; c++) {\n      if ((r !== row || c !== col) && grid[r][c] === val) return false;\n    }\n  }\n  return true;\n};\nfunction App() {\n  _s();\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const initial = generateSudoku(difficulty);\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [selectedCell, setSelectedCell] = useState({\n    row: 0,\n    col: 0\n  });\n\n  // Reload puzzle when difficulty changes\n  useEffect(() => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n  }, [difficulty]);\n\n  // Handle keyboard navigation for arrow keys\n  const handleKeyDown = e => {\n    const {\n      row,\n      col\n    } = selectedCell;\n    if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key)) {\n      e.preventDefault();\n      let newRow = row;\n      let newCol = col;\n      if (e.key === \"ArrowUp\") newRow = row > 0 ? row - 1 : 8;\n      if (e.key === \"ArrowDown\") newRow = row < 8 ? row + 1 : 0;\n      if (e.key === \"ArrowLeft\") newCol = col > 0 ? col - 1 : 8;\n      if (e.key === \"ArrowRight\") newCol = col < 8 ? col + 1 : 0;\n      setSelectedCell({\n        row: newRow,\n        col: newCol\n      });\n    }\n  };\n  const handleChange = (e, row, col) => {\n    if (fixedCells[row][col]) return;\n    const val = e.target.value;\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      const newGrid = grid.map(r => r.slice());\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\n      setGrid(newGrid);\n    }\n  };\n  const loadNewPuzzle = () => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) setGrid(solved);else alert(\"No solution found!\");\n  };\n  const giveHint = () => {\n    if (hintsLeft === 0) {\n      alert(\"No hints left!\");\n      return;\n    }\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (!solved) {\n      alert(\"No solution found to provide hints!\");\n      return;\n    }\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          const newGrid = grid.map(r => r.slice());\n          newGrid[row][col] = solved[row][col];\n          setGrid(newGrid);\n          setHintsLeft(hintsLeft - 1);\n          return;\n        }\n      }\n    }\n    alert(\"No empty cells to give hints!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    tabIndex: 0,\n    onKeyDown: handleKeyDown,\n    style: {\n      outline: \"none\"\n    } // remove focus outline on div\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Difficulty:\\xA0\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: difficulty,\n        onChange: e => setDifficulty(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"easy\",\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"hard\",\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => {\n        const isFixed = fixedCells[rIdx][cIdx];\n        const isValid = isCellValid(grid, rIdx, cIdx);\n        const isSelected = selectedCell.row === rIdx && selectedCell.col === cIdx;\n        const extraBorders = [rIdx % 3 === 0 ? \"thick-top\" : \"\", cIdx % 3 === 0 ? \"thick-left\" : \"\", rIdx === 8 ? \"thick-bottom\" : \"\", cIdx === 8 ? \"thick-right\" : \"\"].filter(Boolean).join(\" \");\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isSelected ? \"selected\" : \"\"} ${!isValid ? \"wrong\" : \"\"}`,\n          maxLength: \"1\",\n          value: val === 0 ? \"\" : val,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          type: \"text\",\n          inputMode: \"numeric\",\n          pattern: \"[1-9]*\",\n          disabled: isFixed,\n          onFocus: () => setSelectedCell({\n            row: rIdx,\n            col: cIdx\n          })\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"z3YYUdzLCHjrcOrm3phjhLIWCCE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","difficulty","puzzle","Array","fill","map","fillsByDifficulty","easy","medium","hard","fills","attempts","random","fixedCells","val","isCellValid","boxRowStart","boxColStart","r","c","App","_s","setDifficulty","initial","setGrid","setFixedCells","hintsLeft","setHintsLeft","selectedCell","setSelectedCell","newPuzzle","handleKeyDown","e","includes","key","preventDefault","newRow","newCol","handleChange","target","value","test","length","newGrid","slice","parseInt","loadNewPuzzle","loadBlankPuzzle","blankGrid","blankFixed","solveCurrentPuzzle","copyGrid","solved","alert","giveHint","className","tabIndex","onKeyDown","style","outline","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","marginTop","rIdx","cIdx","isFixed","isSelected","extraBorders","filter","Boolean","join","maxLength","type","inputMode","pattern","disabled","onFocus","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\nconst generateSudoku = (difficulty = \"medium\") => {\r\n  const puzzle = Array(9)\r\n    .fill(0)\r\n    .map(() => Array(9).fill(0));\r\n  // Difficulty to number of filled cells mapping\r\n  const fillsByDifficulty = {\r\n    easy: 35,\r\n    medium: 25,\r\n    hard: 15,\r\n  };\r\n  const fills = fillsByDifficulty[difficulty] || 25;\r\n\r\n  let attempts = 0;\r\n  while (attempts < fills) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      attempts++;\r\n    }\r\n  }\r\n\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\n// Checks if cell is valid (no Sudoku rule violations)\r\nconst isCellValid = (grid, row, col) => {\r\n  const val = grid[row][col];\r\n  if (val === 0) return true; // empty is always valid\r\n\r\n  // Check row and column\r\n  for (let i = 0; i < 9; i++) {\r\n    if (i !== col && grid[row][i] === val) return false;\r\n    if (i !== row && grid[i][col] === val) return false;\r\n  }\r\n\r\n  // Check 3x3 box\r\n  const boxRowStart = 3 * Math.floor(row / 3);\r\n  const boxColStart = 3 * Math.floor(col / 3);\r\n\r\n  for (let r = boxRowStart; r < boxRowStart + 3; r++) {\r\n    for (let c = boxColStart; c < boxColStart + 3; c++) {\r\n      if ((r !== row || c !== col) && grid[r][c] === val) return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nfunction App() {\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const initial = generateSudoku(difficulty);\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [selectedCell, setSelectedCell] = useState({ row: 0, col: 0 });\r\n\r\n  // Reload puzzle when difficulty changes\r\n  useEffect(() => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n  }, [difficulty]);\r\n\r\n  // Handle keyboard navigation for arrow keys\r\n  const handleKeyDown = (e) => {\r\n    const { row, col } = selectedCell;\r\n    if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key)) {\r\n      e.preventDefault();\r\n      let newRow = row;\r\n      let newCol = col;\r\n      if (e.key === \"ArrowUp\") newRow = row > 0 ? row - 1 : 8;\r\n      if (e.key === \"ArrowDown\") newRow = row < 8 ? row + 1 : 0;\r\n      if (e.key === \"ArrowLeft\") newCol = col > 0 ? col - 1 : 8;\r\n      if (e.key === \"ArrowRight\") newCol = col < 8 ? col + 1 : 0;\r\n      setSelectedCell({ row: newRow, col: newCol });\r\n    }\r\n  };\r\n\r\n  const handleChange = (e, row, col) => {\r\n    if (fixedCells[row][col]) return;\r\n    const val = e.target.value;\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      const newGrid = grid.map((r) => r.slice());\r\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const loadNewPuzzle = () => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9)\r\n      .fill(0)\r\n      .map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9)\r\n      .fill(0)\r\n      .map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) setGrid(solved);\r\n    else alert(\"No solution found!\");\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft === 0) {\r\n      alert(\"No hints left!\");\r\n      return;\r\n    }\r\n\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n\r\n    if (!solved) {\r\n      alert(\"No solution found to provide hints!\");\r\n      return;\r\n    }\r\n\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          const newGrid = grid.map((r) => r.slice());\r\n          newGrid[row][col] = solved[row][col];\r\n          setGrid(newGrid);\r\n          setHintsLeft(hintsLeft - 1);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    alert(\"No empty cells to give hints!\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"app\"\r\n      tabIndex={0}\r\n      onKeyDown={handleKeyDown}\r\n      style={{ outline: \"none\" }} // remove focus outline on div\r\n    >\r\n      <h1>Sudoku</h1>\r\n\r\n      <label>\r\n        Difficulty:&nbsp;\r\n        <select\r\n          value={difficulty}\r\n          onChange={(e) => setDifficulty(e.target.value)}\r\n        >\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n      </label>\r\n\r\n      <div className=\"sudoku-grid\" style={{ marginTop: \"1rem\" }}>\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => {\r\n            const isFixed = fixedCells[rIdx][cIdx];\r\n            const isValid = isCellValid(grid, rIdx, cIdx);\r\n            const isSelected =\r\n              selectedCell.row === rIdx && selectedCell.col === cIdx;\r\n\r\n            const extraBorders = [\r\n              rIdx % 3 === 0 ? \"thick-top\" : \"\",\r\n              cIdx % 3 === 0 ? \"thick-left\" : \"\",\r\n              rIdx === 8 ? \"thick-bottom\" : \"\",\r\n              cIdx === 8 ? \"thick-right\" : \"\",\r\n            ]\r\n              .filter(Boolean)\r\n              .join(\" \");\r\n\r\n            return (\r\n              <input\r\n                key={`${rIdx}-${cIdx}`}\r\n                className={`cell ${\r\n                  isFixed ? \"fixed\" : \"\"\r\n                } ${extraBorders} ${isSelected ? \"selected\" : \"\"} ${\r\n                  !isValid ? \"wrong\" : \"\"\r\n                }`}\r\n                maxLength=\"1\"\r\n                value={val === 0 ? \"\" : val}\r\n                onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                pattern=\"[1-9]*\"\r\n                disabled={isFixed}\r\n                onFocus={() => setSelectedCell({ row: rIdx, col: cIdx })}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"buttons\" style={{ marginTop: \"1rem\" }}>\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}