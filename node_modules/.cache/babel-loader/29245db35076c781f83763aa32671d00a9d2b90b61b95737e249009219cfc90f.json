{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n\n// Sudoku solver logic with backtracking\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isValid(board, row, col, num) {\n  for (let x = 0; x < 9; x++) {\n    if (board[row][x] === num) return false;\n    if (board[x][col] === num) return false;\n    if (board[3 * Math.floor(row / 3) + Math.floor(x / 3)][3 * Math.floor(col / 3) + x % 3] === num) return false;\n  }\n  return true;\n}\nfunction solveSudoku(board) {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (board[row][col] === 0) {\n        for (let num = 1; num <= 9; num++) {\n          if (isValid(board, row, col, num)) {\n            board[row][col] = num;\n            if (solveSudoku(board)) return true;\n            board[row][col] = 0;\n          }\n        }\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n// Deep copy helper\nfunction copyBoard(board) {\n  return board.map(row => [...row]);\n}\n\n// Pre-filled puzzle example (0 means empty)\nconst initialPuzzle = [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]];\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(copyBoard(initialPuzzle));\n  const [solution, setSolution] = useState(null);\n  const [hintsUsed, setHintsUsed] = useState(0);\n\n  // On mount, compute solution once\n  useEffect(() => {\n    const sol = copyBoard(board);\n    if (solveSudoku(sol)) setSolution(sol);else setSolution(null);\n  }, []);\n\n  // Update cell value\n  function handleChange(e, row, col) {\n    let val = parseInt(e.target.value);\n    if (isNaN(val) || val < 1 || val > 9) val = 0;\n\n    // Do not allow changing given cells\n    if (initialPuzzle[row][col] !== 0) return;\n    const newBoard = copyBoard(board);\n    newBoard[row][col] = val;\n    setBoard(newBoard);\n  }\n\n  // Solve full puzzle\n  function handleSolve() {\n    if (solution) {\n      setBoard(copyBoard(solution));\n      setHintsUsed(3);\n    } else {\n      alert(\"No solution available\");\n    }\n  }\n\n  // Give one hint (fill 1 empty cell)\n  function handleHint() {\n    if (!solution) {\n      alert(\"No solution available\");\n      return;\n    }\n    if (hintsUsed >= 3) {\n      alert(\"No more hints left (max 3)\");\n      return;\n    }\n    const newBoard = copyBoard(board);\n    // Find first empty cell and fill it from solution\n    for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        if (newBoard[r][c] === 0) {\n          newBoard[r][c] = solution[r][c];\n          setBoard(newBoard);\n          setHintsUsed(hintsUsed + 1);\n          return;\n        }\n      }\n    }\n    alert(\"No empty cells to fill\");\n  }\n\n  // Clear board to initial puzzle\n  function handleClear() {\n    setBoard(copyBoard(initialPuzzle));\n    setHintsUsed(0);\n  }\n\n  // Let user paste a puzzle string to load and solve\n  // Format: 81 digits string, 0 or . for blanks\n  function handleLoadPuzzle() {\n    const puzzleString = prompt(\"Enter Sudoku puzzle as 81 digits (use 0 or . for blanks):\");\n    if (!puzzleString || puzzleString.length !== 81) {\n      alert(\"Invalid input length\");\n      return;\n    }\n    const newPuzzle = [];\n    for (let i = 0; i < 9; i++) {\n      const row = [];\n      for (let j = 0; j < 9; j++) {\n        const ch = puzzleString[i * 9 + j];\n        if (\"123456789\".includes(ch)) row.push(parseInt(ch));else row.push(0);\n      }\n      newPuzzle.push(row);\n    }\n    setBoard(newPuzzle);\n    setHintsUsed(0);\n\n    // Solve new puzzle to update solution\n    const sol = copyBoard(newPuzzle);\n    if (solveSudoku(sol)) {\n      setSolution(sol);\n    } else {\n      setSolution(null);\n      alert(\"No solution found for this puzzle\");\n    }\n  }\n\n  // Helper to style fixed cells\n  const isFixed = (r, c) => initialPuzzle[r][c] !== 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20,\n      fontFamily: \"Arial\",\n      maxWidth: 400,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Game & Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      style: {\n        borderCollapse: \"collapse\",\n        marginBottom: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, r) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((num, c) => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              border: \"1px solid black\",\n              width: 40,\n              height: 40,\n              backgroundColor: (Math.floor(r / 3) + Math.floor(c / 3)) % 2 === 0 ? \"#ddd\" : \"#fff\",\n              padding: 0,\n              textAlign: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"1\",\n              max: \"9\",\n              value: num === 0 ? \"\" : num,\n              onChange: e => handleChange(e, r, c),\n              disabled: isFixed(r, c),\n              style: {\n                width: \"100%\",\n                height: \"100%\",\n                fontSize: 20,\n                textAlign: \"center\",\n                border: \"none\",\n                backgroundColor: isFixed(r, c) ? \"#bbb\" : \"transparent\",\n                color: isFixed(r, c) ? \"black\" : \"blue\",\n                outline: \"none\",\n                cursor: isFixed(r, c) ? \"default\" : \"text\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 19\n            }, this)\n          }, c, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this))\n        }, r, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSolve,\n        style: {\n          marginRight: 10,\n          padding: \"8px 16px\"\n        },\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleHint,\n        style: {\n          marginRight: 10,\n          padding: \"8px 16px\"\n        },\n        children: [\"Hint (\", 3 - hintsUsed, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        style: {\n          marginRight: 10,\n          padding: \"8px 16px\"\n        },\n        children: \"Reset Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoadPuzzle,\n        style: {\n          padding: \"8px 16px\"\n        },\n        children: \"Load Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        style: {\n          color: \"gray\"\n        },\n        children: \"* You can edit the blue cells. Grey cells are fixed and cannot be changed.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+sMN3taxPgYqulT7Ex4xiI4xUEU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","isValid","board","row","col","num","x","Math","floor","solveSudoku","copyBoard","map","initialPuzzle","App","_s","setBoard","solution","setSolution","hintsUsed","setHintsUsed","sol","handleChange","e","val","parseInt","target","value","isNaN","newBoard","handleSolve","alert","handleHint","r","c","handleClear","handleLoadPuzzle","puzzleString","prompt","length","newPuzzle","i","j","ch","includes","push","isFixed","style","padding","fontFamily","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","borderCollapse","marginBottom","border","width","height","backgroundColor","textAlign","type","min","max","onChange","disabled","fontSize","color","outline","cursor","onClick","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Sudoku solver logic with backtracking\r\nfunction isValid(board, row, col, num) {\r\n  for (let x = 0; x < 9; x++) {\r\n    if (board[row][x] === num) return false;\r\n    if (board[x][col] === num) return false;\r\n    if (\r\n      board[3 * Math.floor(row / 3) + Math.floor(x / 3)][\r\n        3 * Math.floor(col / 3) + (x % 3)\r\n      ] === num\r\n    )\r\n      return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction solveSudoku(board) {\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      if (board[row][col] === 0) {\r\n        for (let num = 1; num <= 9; num++) {\r\n          if (isValid(board, row, col, num)) {\r\n            board[row][col] = num;\r\n            if (solveSudoku(board)) return true;\r\n            board[row][col] = 0;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Deep copy helper\r\nfunction copyBoard(board) {\r\n  return board.map(row => [...row]);\r\n}\r\n\r\n// Pre-filled puzzle example (0 means empty)\r\nconst initialPuzzle = [\r\n  [5,3,0,0,7,0,0,0,0],\r\n  [6,0,0,1,9,5,0,0,0],\r\n  [0,9,8,0,0,0,0,6,0],\r\n  [8,0,0,0,6,0,0,0,3],\r\n  [4,0,0,8,0,3,0,0,1],\r\n  [7,0,0,0,2,0,0,0,6],\r\n  [0,6,0,0,0,0,2,8,0],\r\n  [0,0,0,4,1,9,0,0,5],\r\n  [0,0,0,0,8,0,0,7,9]\r\n];\r\n\r\nfunction App() {\r\n  const [board, setBoard] = useState(copyBoard(initialPuzzle));\r\n  const [solution, setSolution] = useState(null);\r\n  const [hintsUsed, setHintsUsed] = useState(0);\r\n\r\n  // On mount, compute solution once\r\n  useEffect(() => {\r\n    const sol = copyBoard(board);\r\n    if (solveSudoku(sol)) setSolution(sol);\r\n    else setSolution(null);\r\n  }, []);\r\n\r\n  // Update cell value\r\n  function handleChange(e, row, col) {\r\n    let val = parseInt(e.target.value);\r\n    if (isNaN(val) || val < 1 || val > 9) val = 0;\r\n\r\n    // Do not allow changing given cells\r\n    if (initialPuzzle[row][col] !== 0) return;\r\n\r\n    const newBoard = copyBoard(board);\r\n    newBoard[row][col] = val;\r\n    setBoard(newBoard);\r\n  }\r\n\r\n  // Solve full puzzle\r\n  function handleSolve() {\r\n    if (solution) {\r\n      setBoard(copyBoard(solution));\r\n      setHintsUsed(3);\r\n    } else {\r\n      alert(\"No solution available\");\r\n    }\r\n  }\r\n\r\n  // Give one hint (fill 1 empty cell)\r\n  function handleHint() {\r\n    if (!solution) {\r\n      alert(\"No solution available\");\r\n      return;\r\n    }\r\n    if (hintsUsed >= 3) {\r\n      alert(\"No more hints left (max 3)\");\r\n      return;\r\n    }\r\n    const newBoard = copyBoard(board);\r\n    // Find first empty cell and fill it from solution\r\n    for (let r=0; r<9; r++) {\r\n      for (let c=0; c<9; c++) {\r\n        if (newBoard[r][c] === 0) {\r\n          newBoard[r][c] = solution[r][c];\r\n          setBoard(newBoard);\r\n          setHintsUsed(hintsUsed + 1);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    alert(\"No empty cells to fill\");\r\n  }\r\n\r\n  // Clear board to initial puzzle\r\n  function handleClear() {\r\n    setBoard(copyBoard(initialPuzzle));\r\n    setHintsUsed(0);\r\n  }\r\n\r\n  // Let user paste a puzzle string to load and solve\r\n  // Format: 81 digits string, 0 or . for blanks\r\n  function handleLoadPuzzle() {\r\n    const puzzleString = prompt(\"Enter Sudoku puzzle as 81 digits (use 0 or . for blanks):\");\r\n    if (!puzzleString || puzzleString.length !== 81) {\r\n      alert(\"Invalid input length\");\r\n      return;\r\n    }\r\n    const newPuzzle = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < 9; j++) {\r\n        const ch = puzzleString[i * 9 + j];\r\n        if (\"123456789\".includes(ch)) row.push(parseInt(ch));\r\n        else row.push(0);\r\n      }\r\n      newPuzzle.push(row);\r\n    }\r\n    setBoard(newPuzzle);\r\n    setHintsUsed(0);\r\n\r\n    // Solve new puzzle to update solution\r\n    const sol = copyBoard(newPuzzle);\r\n    if (solveSudoku(sol)) {\r\n      setSolution(sol);\r\n    } else {\r\n      setSolution(null);\r\n      alert(\"No solution found for this puzzle\");\r\n    }\r\n  }\r\n\r\n  // Helper to style fixed cells\r\n  const isFixed = (r,c) => initialPuzzle[r][c] !== 0;\r\n\r\n  return (\r\n    <div style={{ padding: 20, fontFamily: \"Arial\", maxWidth: 400, margin: \"auto\" }}>\r\n      <h1>Sudoku Game & Solver</h1>\r\n      <table style={{borderCollapse: \"collapse\", marginBottom: 20}}>\r\n        <tbody>\r\n          {board.map((row, r) => (\r\n            <tr key={r}>\r\n              {row.map((num, c) => (\r\n                <td\r\n                  key={c}\r\n                  style={{\r\n                    border: \"1px solid black\",\r\n                    width: 40,\r\n                    height: 40,\r\n                    backgroundColor: ((Math.floor(r/3)+Math.floor(c/3))%2===0) ? \"#ddd\" : \"#fff\",\r\n                    padding: 0,\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    max=\"9\"\r\n                    value={num === 0 ? \"\" : num}\r\n                    onChange={(e) => handleChange(e, r, c)}\r\n                    disabled={isFixed(r,c)}\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"100%\",\r\n                      fontSize: 20,\r\n                      textAlign: \"center\",\r\n                      border: \"none\",\r\n                      backgroundColor: isFixed(r,c) ? \"#bbb\" : \"transparent\",\r\n                      color: isFixed(r,c) ? \"black\" : \"blue\",\r\n                      outline: \"none\",\r\n                      cursor: isFixed(r,c) ? \"default\" : \"text\",\r\n                    }}\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      <div style={{ marginBottom: 10 }}>\r\n        <button onClick={handleSolve} style={{ marginRight: 10, padding: \"8px 16px\" }}>\r\n          Solve\r\n        </button>\r\n        <button onClick={handleHint} style={{ marginRight: 10, padding: \"8px 16px\" }}>\r\n          Hint ({3 - hintsUsed} left)\r\n        </button>\r\n        <button onClick={handleClear} style={{ marginRight: 10, padding: \"8px 16px\" }}>\r\n          Reset Puzzle\r\n        </button>\r\n        <button onClick={handleLoadPuzzle} style={{ padding: \"8px 16px\" }}>\r\n          Load Puzzle\r\n        </button>\r\n      </div>\r\n\r\n      <div>\r\n        <small style={{ color: \"gray\" }}>\r\n          * You can edit the blue cells. Grey cells are fixed and cannot be changed.\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}