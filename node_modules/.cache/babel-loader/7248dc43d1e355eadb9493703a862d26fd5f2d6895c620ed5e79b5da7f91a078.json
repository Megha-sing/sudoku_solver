{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\nconst generateSudoku = (difficulty = \"medium\") => {\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  let attempts = 0;\n\n  // Number of cells to fill based on difficulty\n  const fillCount = difficulty === \"easy\" ? 30 : difficulty === \"medium\" ? 20 : 15;\n  while (attempts < fillCount) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      attempts++;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\nconst isCellValid = (grid, row, col, num) => {\n  for (let i = 0; i < 9; i++) {\n    if (i !== col && grid[row][i] === num) return false;\n    if (i !== row && grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if ((boxRow !== row || boxCol !== col) && grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nfunction App() {\n  _s();\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const initial = generateSudoku(difficulty);\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [selectedCell, setSelectedCell] = useState({\n    row: 0,\n    col: 0\n  });\n\n  // Timer states\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(true);\n  const timerRef = useRef(null);\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setTime(prev => prev + 1);\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [isRunning]);\n\n  // Regenerate puzzle when difficulty changes\n  useEffect(() => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(true);\n  }, [difficulty]);\n  const handleChange = (e, row, col) => {\n    if (fixedCells[row][col]) return;\n    const val = e.target.value;\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      const newGrid = grid.map(r => r.slice());\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\n      setGrid(newGrid);\n    }\n  };\n  const loadNewPuzzle = () => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(true);\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(false);\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) {\n      setGrid(solved);\n      setIsRunning(false);\n    } else {\n      alert(\"No solution found!\");\n    }\n  };\n  const giveHint = () => {\n    if (hintsLeft === 0) {\n      alert(\"No hints left!\");\n      return;\n    }\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (!solved) {\n      alert(\"No solution found to provide hints!\");\n      return;\n    }\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          const newGrid = grid.map(r => r.slice());\n          newGrid[row][col] = solved[row][col];\n          setGrid(newGrid);\n          setHintsLeft(hintsLeft - 1);\n          return;\n        }\n      }\n    }\n    alert(\"No empty cells to give hints!\");\n  };\n\n  // Arrow key navigation for selected cell\n  const handleKeyDown = e => {\n    e.preventDefault();\n    const {\n      row,\n      col\n    } = selectedCell;\n    switch (e.key) {\n      case \"ArrowUp\":\n        setSelectedCell({\n          row: (row + 8) % 9,\n          col\n        });\n        break;\n      case \"ArrowDown\":\n        setSelectedCell({\n          row: (row + 1) % 9,\n          col\n        });\n        break;\n      case \"ArrowLeft\":\n        setSelectedCell({\n          row,\n          col: (col + 8) % 9\n        });\n        break;\n      case \"ArrowRight\":\n        setSelectedCell({\n          row,\n          col: (col + 1) % 9\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Format timer as mm:ss\n  const formatTime = seconds => {\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\n    const s = (seconds % 60).toString().padStart(2, \"0\");\n    return `${m}:${s}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    tabIndex: 0,\n    onKeyDown: handleKeyDown,\n    style: {\n      outline: \"none\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Difficulty:\\xA0\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: difficulty,\n        onChange: e => setDifficulty(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"easy\",\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"hard\",\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"1rem\",\n        fontWeight: \"bold\"\n      },\n      children: [\"Time: \", formatTime(time)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"0.5rem 0\"\n      },\n      children: isRunning ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(false),\n        children: \"Stop Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(true),\n        children: \"Start Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => {\n        const isFixed = fixedCells[rIdx][cIdx];\n        const isSelected = selectedCell.row === rIdx && selectedCell.col === cIdx;\n        const isValidCell = val === 0 || isCellValid(grid, rIdx, cIdx, val);\n\n        // Determine border classes based on position\n        const extraBorders = [rIdx % 3 === 0 ? \"thick-top\" : \"\", cIdx % 3 === 0 ? \"thick-left\" : \"\", rIdx === 8 ? \"thick-bottom\" : \"\", cIdx === 8 ? \"thick-right\" : \"\"].join(\" \");\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `cell \n                  ${isFixed ? \"fixed\" : \"\"}\n                  ${extraBorders}\n                  ${!isValidCell ? \"invalid\" : \"\"}\n                  ${isSelected ? \"selected\" : \"\"}\n                `,\n          maxLength: \"1\",\n          value: val === 0 ? \"\" : val,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          type: \"text\",\n          inputMode: \"numeric\",\n          pattern: \"[1-9]*\",\n          disabled: isFixed,\n          onClick: () => setSelectedCell({\n            row: rIdx,\n            col: cIdx\n          })\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XmFunggYhhIEMInWVLQ85VTLVcI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","difficulty","puzzle","Array","fill","map","attempts","fillCount","random","fixedCells","val","isCellValid","App","_s","setDifficulty","initial","setGrid","setFixedCells","hintsLeft","setHintsLeft","selectedCell","setSelectedCell","time","setTime","isRunning","setIsRunning","timerRef","current","setInterval","prev","clearInterval","newPuzzle","handleChange","e","target","value","test","length","newGrid","r","slice","parseInt","loadNewPuzzle","loadBlankPuzzle","blankGrid","blankFixed","solveCurrentPuzzle","copyGrid","solved","alert","giveHint","handleKeyDown","preventDefault","key","formatTime","seconds","m","toString","padStart","s","className","tabIndex","onKeyDown","style","outline","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","marginTop","fontWeight","margin","onClick","rIdx","cIdx","isFixed","isSelected","isValidCell","extraBorders","join","maxLength","type","inputMode","pattern","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\nconst generateSudoku = (difficulty = \"medium\") => {\r\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\r\n  let attempts = 0;\r\n\r\n  // Number of cells to fill based on difficulty\r\n  const fillCount = difficulty === \"easy\" ? 30 : difficulty === \"medium\" ? 20 : 15;\r\n\r\n  while (attempts < fillCount) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      attempts++;\r\n    }\r\n  }\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\nconst isCellValid = (grid, row, col, num) => {\r\n  for (let i = 0; i < 9; i++) {\r\n    if (i !== col && grid[row][i] === num) return false;\r\n    if (i !== row && grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if ((boxRow !== row || boxCol !== col) && grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nfunction App() {\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const initial = generateSudoku(difficulty);\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [selectedCell, setSelectedCell] = useState({ row: 0, col: 0 });\r\n\r\n  // Timer states\r\n  const [time, setTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(true);\r\n  const timerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setTime(prev => prev + 1);\r\n      }, 1000);\r\n    } else if (timerRef.current) {\r\n      clearInterval(timerRef.current);\r\n    }\r\n    return () => clearInterval(timerRef.current);\r\n  }, [isRunning]);\r\n\r\n  // Regenerate puzzle when difficulty changes\r\n  useEffect(() => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(true);\r\n  }, [difficulty]);\r\n\r\n  const handleChange = (e, row, col) => {\r\n    if (fixedCells[row][col]) return;\r\n\r\n    const val = e.target.value;\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      const newGrid = grid.map(r => r.slice());\r\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const loadNewPuzzle = () => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map(r => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) {\r\n      setGrid(solved);\r\n      setIsRunning(false);\r\n    } else {\r\n      alert(\"No solution found!\");\r\n    }\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft === 0) {\r\n      alert(\"No hints left!\");\r\n      return;\r\n    }\r\n\r\n    const copyGrid = grid.map(r => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n\r\n    if (!solved) {\r\n      alert(\"No solution found to provide hints!\");\r\n      return;\r\n    }\r\n\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          const newGrid = grid.map(r => r.slice());\r\n          newGrid[row][col] = solved[row][col];\r\n          setGrid(newGrid);\r\n          setHintsLeft(hintsLeft - 1);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    alert(\"No empty cells to give hints!\");\r\n  };\r\n\r\n  // Arrow key navigation for selected cell\r\n  const handleKeyDown = (e) => {\r\n    e.preventDefault();\r\n    const { row, col } = selectedCell;\r\n    switch (e.key) {\r\n      case \"ArrowUp\":\r\n        setSelectedCell({ row: (row + 8) % 9, col });\r\n        break;\r\n      case \"ArrowDown\":\r\n        setSelectedCell({ row: (row + 1) % 9, col });\r\n        break;\r\n      case \"ArrowLeft\":\r\n        setSelectedCell({ row, col: (col + 8) % 9 });\r\n        break;\r\n      case \"ArrowRight\":\r\n        setSelectedCell({ row, col: (col + 1) % 9 });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Format timer as mm:ss\r\n  const formatTime = (seconds) => {\r\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\r\n    const s = (seconds % 60).toString().padStart(2, \"0\");\r\n    return `${m}:${s}`;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"app\"\r\n      tabIndex={0}\r\n      onKeyDown={handleKeyDown}\r\n      style={{ outline: \"none\" }}\r\n    >\r\n      <h1>Sudoku</h1>\r\n\r\n      <label>\r\n        Difficulty:&nbsp;\r\n        <select\r\n          value={difficulty}\r\n          onChange={(e) => setDifficulty(e.target.value)}\r\n        >\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n      </label>\r\n\r\n      <div style={{ marginTop: \"1rem\", fontWeight: \"bold\" }}>\r\n        Time: {formatTime(time)}\r\n      </div>\r\n\r\n      <div style={{ margin: \"0.5rem 0\" }}>\r\n        {isRunning ? (\r\n          <button onClick={() => setIsRunning(false)}>Stop Timer</button>\r\n        ) : (\r\n          <button onClick={() => setIsRunning(true)}>Start Timer</button>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"sudoku-grid\">\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => {\r\n            const isFixed = fixedCells[rIdx][cIdx];\r\n            const isSelected = selectedCell.row === rIdx && selectedCell.col === cIdx;\r\n\r\n            const isValidCell =\r\n              val === 0 || isCellValid(grid, rIdx, cIdx, val);\r\n\r\n            // Determine border classes based on position\r\n            const extraBorders = [\r\n              rIdx % 3 === 0 ? \"thick-top\" : \"\",\r\n              cIdx % 3 === 0 ? \"thick-left\" : \"\",\r\n              rIdx === 8 ? \"thick-bottom\" : \"\",\r\n              cIdx === 8 ? \"thick-right\" : \"\"\r\n            ].join(\" \");\r\n\r\n            return (\r\n              <input\r\n                key={`${rIdx}-${cIdx}`}\r\n                className={`cell \r\n                  ${isFixed ? \"fixed\" : \"\"}\r\n                  ${extraBorders}\r\n                  ${!isValidCell ? \"invalid\" : \"\"}\r\n                  ${isSelected ? \"selected\" : \"\"}\r\n                `}\r\n                maxLength=\"1\"\r\n                value={val === 0 ? \"\" : val}\r\n                onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                pattern=\"[1-9]*\"\r\n                disabled={isFixed}\r\n                onClick={() => setSelectedCell({ row: rIdx, col: cIdx })}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"buttons\">\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}