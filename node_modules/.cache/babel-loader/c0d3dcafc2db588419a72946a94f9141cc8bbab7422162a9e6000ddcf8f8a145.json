{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\n// Utility to check if placing num at grid[row][col] is valid\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\n\n// Solve Sudoku with backtracking\nconst solveSudoku = grid => {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (grid[row][col] === 0) {\n        for (let num = 1; num <= 9; num++) {\n          if (isSafe(grid, row, col, num)) {\n            grid[row][col] = num;\n            if (solveSudoku(grid)) return true;\n            grid[row][col] = 0;\n          }\n        }\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n// Generate a fully solved sudoku grid\nconst generateFullGrid = () => {\n  const grid = Array(9).fill(0).map(() => Array(9).fill(0));\n  const fillGrid = () => {\n    for (let i = 0; i < 81; i++) {\n      const row = Math.floor(i / 9);\n      const col = i % 9;\n      if (grid[row][col] === 0) {\n        let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        // Shuffle numbers array\n        numbers.sort(() => Math.random() - 0.5);\n        for (let num of numbers) {\n          if (isSafe(grid, row, col, num)) {\n            grid[row][col] = num;\n            if (fillGrid()) return true;\n            grid[row][col] = 0;\n          }\n        }\n        return false;\n      }\n    }\n    return true;\n  };\n  fillGrid();\n  return grid;\n};\n\n// Remove cells to create puzzle based on difficulty\nconst generateSudoku = (difficulty = \"easy\") => {\n  let attempts;\n  if (difficulty === \"easy\") attempts = 40;else if (difficulty === \"medium\") attempts = 50;else attempts = 60; // hard\n\n  const fullGrid = generateFullGrid();\n\n  // Deep copy grid for puzzle\n  const puzzle = fullGrid.map(row => row.slice());\n  while (attempts > 0) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    if (puzzle[row][col] !== 0) {\n      // Backup cell value\n      const backup = puzzle[row][col];\n      puzzle[row][col] = 0;\n\n      // Check if puzzle still solvable with one unique solution\n      const copyGrid = puzzle.map(r => r.slice());\n      if (!solveSudoku(copyGrid)) {\n        // Revert if no solution\n        puzzle[row][col] = backup;\n        attempts--;\n      } else {\n        attempts--;\n      }\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\n\n// Check if current grid is solved and valid (no conflicts, no zeros)\nconst isSolved = grid => {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      const val = grid[row][col];\n      if (val === 0) return false;\n      // Temporarily clear cell to check validity\n      grid[row][col] = 0;\n      if (!isSafe(grid, row, col, val)) {\n        grid[row][col] = val; // revert\n        return false;\n      }\n      grid[row][col] = val; // revert\n    }\n  }\n  return true;\n};\nfunction App() {\n  _s();\n  const initial = generateSudoku(\"easy\");\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [conflictCells, setConflictCells] = useState(new Set());\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [difficulty, setDifficulty] = useState(\"easy\");\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const timerRef = useRef(null);\n  const [dialogMessage, setDialogMessage] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Show dialog with optional auto-close timeout\n  const showDialog = (message, autoClose = false) => {\n    setDialogMessage(message);\n    setIsDialogOpen(true);\n    if (autoClose) {\n      setTimeout(() => setIsDialogOpen(false), 3000);\n    }\n  };\n  const closeDialog = () => {\n    setDialogMessage(\"\");\n    setIsDialogOpen(false);\n  };\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setTime(prev => prev + 1);\n      }, 1000);\n    } else {\n      if (timerRef.current) clearInterval(timerRef.current);\n    }\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n    };\n  }, [isRunning]);\n\n  // When difficulty changes, reset puzzle and timer\n  useEffect(() => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setConflictCells(new Set());\n    setTime(0);\n    setIsRunning(false);\n  }, [difficulty]);\n\n  // Validate input and check conflicts\n  const handleChange = (e, row, col) => {\n    if (fixedCells[row][col]) return;\n    const val = e.target.value;\n    const newGrid = grid.map(r => r.slice());\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\n      setGrid(newGrid);\n\n      // Conflict detection\n      const conflicts = new Set();\n      const num = parseInt(val);\n      if (!num) {\n        setConflictCells(new Set());\n        return;\n      }\n\n      // Row conflicts\n      for (let c = 0; c < 9; c++) {\n        if (c !== col && newGrid[row][c] === num) {\n          conflicts.add(`${row}-${c}`);\n          conflicts.add(`${row}-${col}`);\n        }\n      }\n\n      // Column conflicts\n      for (let r = 0; r < 9; r++) {\n        if (r !== row && newGrid[r][col] === num) {\n          conflicts.add(`${r}-${col}`);\n          conflicts.add(`${row}-${col}`);\n        }\n      }\n\n      // Box conflicts\n      const boxRowStart = 3 * Math.floor(row / 3);\n      const boxColStart = 3 * Math.floor(col / 3);\n      for (let r = boxRowStart; r < boxRowStart + 3; r++) {\n        for (let c = boxColStart; c < boxColStart + 3; c++) {\n          if ((r !== row || c !== col) && newGrid[r][c] === num) {\n            conflicts.add(`${r}-${c}`);\n            conflicts.add(`${row}-${col}`);\n          }\n        }\n      }\n      setConflictCells(conflicts);\n\n      // Check if solved on every valid input\n      if (conflicts.size === 0 && isSolved(newGrid)) {\n        showDialog(\"ðŸŽ‰ Congratulations! You solved the Sudoku!\", true);\n        setIsRunning(false);\n      }\n    }\n  };\n  const loadNewPuzzle = () => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setConflictCells(new Set());\n    setTime(0);\n    setIsRunning(false);\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n    setConflictCells(new Set());\n    setTime(0);\n    setIsRunning(false);\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    if (solveSudoku(copyGrid)) {\n      setGrid(copyGrid);\n      setConflictCells(new Set());\n      setIsRunning(false);\n    } else {\n      showDialog(\"No solution found!\");\n    }\n  };\n  const giveHint = () => {\n    if (hintsLeft === 0) {\n      showDialog(\"No hints left!\");\n      return;\n    }\n    const copyGrid = grid.map(r => r.slice());\n    if (!solveSudoku(copyGrid)) {\n      showDialog(\"No solution found to provide hints!\");\n      return;\n    }\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          const newGrid = grid.map(r => r.slice());\n          newGrid[row][col] = copyGrid[row][col];\n          setGrid(newGrid);\n          setHintsLeft(hintsLeft - 1);\n          return;\n        }\n      }\n    }\n    showDialog(\"No empty cells to give hints!\");\n  };\n  const formatTime = seconds => {\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\n    const s = (seconds % 60).toString().padStart(2, \"0\");\n    return `${m}:${s}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"difficulty-select\",\n        children: \"Select Difficulty: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"difficulty-select\",\n        value: difficulty,\n        onChange: e => setDifficulty(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"easy\",\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"hard\",\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      style: {\n        marginTop: \"20px\"\n      },\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => {\n        const isFixed = fixedCells[rIdx][cIdx];\n        const key = `${rIdx}-${cIdx}`;\n        const isConflict = conflictCells.has(key);\n        const extraBorders = [rIdx % 3 === 0 ? \"thick-top\" : \"\", cIdx % 3 === 0 ? \"thick-left\" : \"\", rIdx === 8 ? \"thick-bottom\" : \"\", cIdx === 8 ? \"thick-right\" : \"\"].join(\" \");\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isConflict ? \"wrong\" : \"\"}`,\n          maxLength: \"1\",\n          value: val === 0 ? \"\" : val,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          type: \"text\",\n          inputMode: \"numeric\",\n          pattern: \"[1-9]*\",\n          disabled: isFixed,\n          autoComplete: \"off\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Timer: \", formatTime(time)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(true),\n        disabled: isRunning,\n        children: \"Start Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(false),\n        disabled: !isRunning,\n        children: \"Stop Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setTime(0);\n          setIsRunning(false);\n        },\n        children: \"Reset Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), isDialogOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dialog-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dialog-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: dialogMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), !dialogMessage.includes(\"Congratulations\") && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeDialog,\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AL1F4Z5GDM5YzumHUz/7GPyjjEY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","generateFullGrid","Array","fill","map","fillGrid","numbers","sort","random","generateSudoku","difficulty","attempts","fullGrid","puzzle","slice","backup","copyGrid","r","fixedCells","val","isSolved","App","_s","initial","setGrid","setFixedCells","conflictCells","setConflictCells","Set","hintsLeft","setHintsLeft","setDifficulty","time","setTime","isRunning","setIsRunning","timerRef","dialogMessage","setDialogMessage","isDialogOpen","setIsDialogOpen","showDialog","message","autoClose","setTimeout","closeDialog","current","setInterval","prev","clearInterval","newPuzzle","handleChange","e","target","value","newGrid","test","length","parseInt","conflicts","c","add","boxRowStart","boxColStart","size","loadNewPuzzle","loadBlankPuzzle","blankGrid","blankFixed","solveCurrentPuzzle","giveHint","formatTime","seconds","m","toString","padStart","s","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","style","marginTop","rIdx","cIdx","isFixed","key","isConflict","has","extraBorders","join","maxLength","type","inputMode","pattern","disabled","autoComplete","onClick","includes","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\n\r\n// Utility to check if placing num at grid[row][col] is valid\r\nconst isSafe = (grid, row, col, num) => {\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n// Solve Sudoku with backtracking\r\nconst solveSudoku = (grid) => {\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      if (grid[row][col] === 0) {\r\n        for (let num = 1; num <= 9; num++) {\r\n          if (isSafe(grid, row, col, num)) {\r\n            grid[row][col] = num;\r\n            if (solveSudoku(grid)) return true;\r\n            grid[row][col] = 0;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n// Generate a fully solved sudoku grid\r\nconst generateFullGrid = () => {\r\n  const grid = Array(9).fill(0).map(() => Array(9).fill(0));\r\n  const fillGrid = () => {\r\n    for (let i = 0; i < 81; i++) {\r\n      const row = Math.floor(i / 9);\r\n      const col = i % 9;\r\n      if (grid[row][col] === 0) {\r\n        let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        // Shuffle numbers array\r\n        numbers.sort(() => Math.random() - 0.5);\r\n        for (let num of numbers) {\r\n          if (isSafe(grid, row, col, num)) {\r\n            grid[row][col] = num;\r\n            if (fillGrid()) return true;\r\n            grid[row][col] = 0;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  fillGrid();\r\n  return grid;\r\n};\r\n\r\n// Remove cells to create puzzle based on difficulty\r\nconst generateSudoku = (difficulty = \"easy\") => {\r\n  let attempts;\r\n  if (difficulty === \"easy\") attempts = 40;\r\n  else if (difficulty === \"medium\") attempts = 50;\r\n  else attempts = 60; // hard\r\n\r\n  const fullGrid = generateFullGrid();\r\n\r\n  // Deep copy grid for puzzle\r\n  const puzzle = fullGrid.map(row => row.slice());\r\n\r\n  while (attempts > 0) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n\r\n    if (puzzle[row][col] !== 0) {\r\n      // Backup cell value\r\n      const backup = puzzle[row][col];\r\n      puzzle[row][col] = 0;\r\n\r\n      // Check if puzzle still solvable with one unique solution\r\n      const copyGrid = puzzle.map(r => r.slice());\r\n      if (!solveSudoku(copyGrid)) {\r\n        // Revert if no solution\r\n        puzzle[row][col] = backup;\r\n        attempts--;\r\n      } else {\r\n        attempts--;\r\n      }\r\n    }\r\n  }\r\n\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\n// Check if current grid is solved and valid (no conflicts, no zeros)\r\nconst isSolved = (grid) => {\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      const val = grid[row][col];\r\n      if (val === 0) return false;\r\n      // Temporarily clear cell to check validity\r\n      grid[row][col] = 0;\r\n      if (!isSafe(grid, row, col, val)) {\r\n        grid[row][col] = val; // revert\r\n        return false;\r\n      }\r\n      grid[row][col] = val; // revert\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nfunction App() {\r\n  const initial = generateSudoku(\"easy\");\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [conflictCells, setConflictCells] = useState(new Set());\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [difficulty, setDifficulty] = useState(\"easy\");\r\n\r\n  const [time, setTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const timerRef = useRef(null);\r\n\r\n  const [dialogMessage, setDialogMessage] = useState(\"\");\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  // Show dialog with optional auto-close timeout\r\n  const showDialog = (message, autoClose = false) => {\r\n    setDialogMessage(message);\r\n    setIsDialogOpen(true);\r\n    if (autoClose) {\r\n      setTimeout(() => setIsDialogOpen(false), 3000);\r\n    }\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setDialogMessage(\"\");\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setTime(prev => prev + 1);\r\n      }, 1000);\r\n    } else {\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n    }\r\n    return () => {\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n    };\r\n  }, [isRunning]);\r\n\r\n  // When difficulty changes, reset puzzle and timer\r\n  useEffect(() => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setConflictCells(new Set());\r\n    setTime(0);\r\n    setIsRunning(false);\r\n  }, [difficulty]);\r\n\r\n  // Validate input and check conflicts\r\n  const handleChange = (e, row, col) => {\r\n    if (fixedCells[row][col]) return;\r\n\r\n    const val = e.target.value;\r\n    const newGrid = grid.map(r => r.slice());\r\n\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\r\n      setGrid(newGrid);\r\n\r\n      // Conflict detection\r\n      const conflicts = new Set();\r\n      const num = parseInt(val);\r\n      if (!num) {\r\n        setConflictCells(new Set());\r\n        return;\r\n      }\r\n\r\n      // Row conflicts\r\n      for (let c = 0; c < 9; c++) {\r\n        if (c !== col && newGrid[row][c] === num) {\r\n          conflicts.add(`${row}-${c}`);\r\n          conflicts.add(`${row}-${col}`);\r\n        }\r\n      }\r\n\r\n      // Column conflicts\r\n      for (let r = 0; r < 9; r++) {\r\n        if (r !== row && newGrid[r][col] === num) {\r\n          conflicts.add(`${r}-${col}`);\r\n          conflicts.add(`${row}-${col}`);\r\n        }\r\n      }\r\n\r\n      // Box conflicts\r\n      const boxRowStart = 3 * Math.floor(row / 3);\r\n      const boxColStart = 3 * Math.floor(col / 3);\r\n      for (let r = boxRowStart; r < boxRowStart + 3; r++) {\r\n        for (let c = boxColStart; c < boxColStart + 3; c++) {\r\n          if ((r !== row || c !== col) && newGrid[r][c] === num) {\r\n            conflicts.add(`${r}-${c}`);\r\n            conflicts.add(`${row}-${col}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      setConflictCells(conflicts);\r\n\r\n      // Check if solved on every valid input\r\n      if (conflicts.size === 0 && isSolved(newGrid)) {\r\n        showDialog(\"ðŸŽ‰ Congratulations! You solved the Sudoku!\", true);\r\n        setIsRunning(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const loadNewPuzzle = () => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setConflictCells(new Set());\r\n    setTime(0);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n    setConflictCells(new Set());\r\n    setTime(0);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map(r => r.slice());\r\n    if (solveSudoku(copyGrid)) {\r\n      setGrid(copyGrid);\r\n      setConflictCells(new Set());\r\n      setIsRunning(false);\r\n    } else {\r\n      showDialog(\"No solution found!\");\r\n    }\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft === 0) {\r\n      showDialog(\"No hints left!\");\r\n      return;\r\n    }\r\n    const copyGrid = grid.map(r => r.slice());\r\n    if (!solveSudoku(copyGrid)) {\r\n      showDialog(\"No solution found to provide hints!\");\r\n      return;\r\n    }\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          const newGrid = grid.map(r => r.slice());\r\n          newGrid[row][col] = copyGrid[row][col];\r\n          setGrid(newGrid);\r\n          setHintsLeft(hintsLeft - 1);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    showDialog(\"No empty cells to give hints!\");\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\r\n    const s = (seconds % 60).toString().padStart(2, \"0\");\r\n    return `${m}:${s}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Sudoku</h1>\r\n\r\n      <div>\r\n        <label htmlFor=\"difficulty-select\">Select Difficulty: </label>\r\n        <select\r\n          id=\"difficulty-select\"\r\n          value={difficulty}\r\n          onChange={e => setDifficulty(e.target.value)}\r\n        >\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"sudoku-grid\" style={{ marginTop: \"20px\" }}>\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => {\r\n            const isFixed = fixedCells[rIdx][cIdx];\r\n            const key = `${rIdx}-${cIdx}`;\r\n            const isConflict = conflictCells.has(key);\r\n\r\n            const extraBorders = [\r\n              rIdx % 3 === 0 ? \"thick-top\" : \"\",\r\n              cIdx % 3 === 0 ? \"thick-left\" : \"\",\r\n              rIdx === 8 ? \"thick-bottom\" : \"\",\r\n              cIdx === 8 ? \"thick-right\" : \"\"\r\n            ].join(\" \");\r\n\r\n            return (\r\n              <input\r\n                key={key}\r\n                className={`cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isConflict ? \"wrong\" : \"\"}`}\r\n                maxLength=\"1\"\r\n                value={val === 0 ? \"\" : val}\r\n                onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                pattern=\"[1-9]*\"\r\n                disabled={isFixed}\r\n                autoComplete=\"off\"\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"buttons\" style={{ marginTop: \"20px\" }}>\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <div>Timer: {formatTime(time)}</div>\r\n        <button onClick={() => setIsRunning(true)} disabled={isRunning}>Start Timer</button>\r\n        <button onClick={() => setIsRunning(false)} disabled={!isRunning}>Stop Timer</button>\r\n        <button onClick={() => { setTime(0); setIsRunning(false); }}>Reset Timer</button>\r\n      </div>\r\n\r\n      {isDialogOpen && (\r\n        <div className=\"dialog-overlay\">\r\n          <div className=\"dialog-box\">\r\n            <p>{dialogMessage}</p>\r\n            {!dialogMessage.includes(\"Congratulations\") && (\r\n              <button onClick={closeDialog}>OK</button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}