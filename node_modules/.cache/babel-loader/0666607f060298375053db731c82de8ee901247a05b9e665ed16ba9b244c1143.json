{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\nconst generateSudoku = (difficulty = \"easy\") => {\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  let attempts;\n  if (difficulty === \"easy\") attempts = 30;else if (difficulty === \"medium\") attempts = 20;else attempts = 10;\n  while (attempts > 0) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      attempts--;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\nfunction App() {\n  _s();\n  const initial = generateSudoku();\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [conflictCells, setConflictCells] = useState(new Set());\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [difficulty, setDifficulty] = useState(\"easy\");\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const timerRef = useRef(null);\n  const [dialogMessage, setDialogMessage] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const showDialog = message => {\n    setDialogMessage(message);\n    setIsDialogOpen(true);\n  };\n  const closeDialog = () => {\n    setDialogMessage(\"\");\n    setIsDialogOpen(false);\n  };\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setTime(prev => prev + 1);\n      }, 1000);\n    } else {\n      if (timerRef.current) clearInterval(timerRef.current);\n    }\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n    };\n  }, [isRunning]);\n  useEffect(() => {\n    setTime(0);\n    setIsRunning(false);\n  }, [grid, difficulty]);\n  const handleChange = (e, row, col) => {\n    if (fixedCells[row][col]) return;\n    const val = e.target.value;\n    const newGrid = grid.map(r => r.slice());\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\n      setGrid(newGrid);\n      const conflicts = new Set();\n      const num = parseInt(val);\n      if (!num) {\n        setConflictCells(new Set());\n        return;\n      }\n      for (let c = 0; c < 9; c++) {\n        if (c !== col && newGrid[row][c] === num) {\n          conflicts.add(`${row}-${c}`);\n          conflicts.add(`${row}-${col}`);\n        }\n      }\n      for (let r = 0; r < 9; r++) {\n        if (r !== row && newGrid[r][col] === num) {\n          conflicts.add(`${r}-${col}`);\n          conflicts.add(`${row}-${col}`);\n        }\n      }\n      const boxRowStart = 3 * Math.floor(row / 3);\n      const boxColStart = 3 * Math.floor(col / 3);\n      for (let r = boxRowStart; r < boxRowStart + 3; r++) {\n        for (let c = boxColStart; c < boxColStart + 3; c++) {\n          if ((r !== row || c !== col) && newGrid[r][c] === num) {\n            conflicts.add(`${r}-${c}`);\n            conflicts.add(`${row}-${col}`);\n          }\n        }\n      }\n      setConflictCells(conflicts);\n    }\n  };\n  const loadNewPuzzle = () => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setConflictCells(new Set());\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n    setConflictCells(new Set());\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) {\n      setGrid(solved);\n      setConflictCells(new Set());\n    } else {\n      showDialog(\"No solution found!\");\n    }\n  };\n  const giveHint = () => {\n    if (hintsLeft === 0) {\n      showDialog(\"No hints left!\");\n      return;\n    }\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (!solved) {\n      showDialog(\"No solution found to provide hints!\");\n      return;\n    }\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          const newGrid = grid.map(r => r.slice());\n          newGrid[row][col] = solved[row][col];\n          setGrid(newGrid);\n          setHintsLeft(hintsLeft - 1);\n          return;\n        }\n      }\n    }\n    showDialog(\"No empty cells to give hints!\");\n  };\n  const formatTime = seconds => {\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\n    const s = (seconds % 60).toString().padStart(2, \"0\");\n    return `${m}:${s}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"difficulty-select\",\n        children: \"Select Difficulty: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"difficulty-select\",\n        value: difficulty,\n        onChange: e => {\n          setDifficulty(e.target.value);\n          const newPuzzle = generateSudoku(e.target.value);\n          setGrid(newPuzzle.puzzle);\n          setFixedCells(newPuzzle.fixedCells);\n          setHintsLeft(3);\n          setConflictCells(new Set());\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"easy\",\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"hard\",\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      style: {\n        marginTop: \"20px\"\n      },\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => {\n        const isFixed = fixedCells[rIdx][cIdx];\n        const key = `${rIdx}-${cIdx}`;\n        const isConflict = conflictCells.has(key);\n        const extraBorders = [rIdx % 3 === 0 ? \"thick-top\" : \"\", cIdx % 3 === 0 ? \"thick-left\" : \"\", rIdx === 8 ? \"thick-bottom\" : \"\", cIdx === 8 ? \"thick-right\" : \"\"].join(\" \");\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isConflict ? \"wrong\" : \"\"}`,\n          maxLength: \"1\",\n          value: val === 0 ? \"\" : val,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          type: \"text\",\n          inputMode: \"numeric\",\n          pattern: \"[1-9]*\",\n          disabled: isFixed,\n          autoComplete: \"off\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Timer: \", formatTime(time)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(true),\n        disabled: isRunning,\n        children: \"Start Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(false),\n        disabled: !isRunning,\n        children: \"Stop Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setTime(0);\n          setIsRunning(false);\n        },\n        children: \"Reset Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), isDialogOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dialog-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dialog-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: dialogMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeDialog,\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AL1F4Z5GDM5YzumHUz/7GPyjjEY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","difficulty","puzzle","Array","fill","map","attempts","random","fixedCells","val","App","_s","initial","setGrid","setFixedCells","conflictCells","setConflictCells","Set","hintsLeft","setHintsLeft","setDifficulty","time","setTime","isRunning","setIsRunning","timerRef","dialogMessage","setDialogMessage","isDialogOpen","setIsDialogOpen","showDialog","message","closeDialog","current","setInterval","prev","clearInterval","handleChange","e","target","value","newGrid","r","slice","test","length","parseInt","conflicts","c","add","boxRowStart","boxColStart","loadNewPuzzle","newPuzzle","loadBlankPuzzle","blankGrid","blankFixed","solveCurrentPuzzle","copyGrid","solved","giveHint","formatTime","seconds","m","toString","padStart","s","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","style","marginTop","rIdx","cIdx","isFixed","key","isConflict","has","extraBorders","join","maxLength","type","inputMode","pattern","disabled","autoComplete","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\nconst generateSudoku = (difficulty = \"easy\") => {\r\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\r\n  let attempts;\r\n  if (difficulty === \"easy\") attempts = 30;\r\n  else if (difficulty === \"medium\") attempts = 20;\r\n  else attempts = 10;\r\n  while (attempts > 0) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      attempts--;\r\n    }\r\n  }\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\nfunction App() {\r\n  const initial = generateSudoku();\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [conflictCells, setConflictCells] = useState(new Set());\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [difficulty, setDifficulty] = useState(\"easy\");\r\n\r\n  const [time, setTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const timerRef = useRef(null);\r\n\r\n  const [dialogMessage, setDialogMessage] = useState(\"\");\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  const showDialog = (message) => {\r\n    setDialogMessage(message);\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setDialogMessage(\"\");\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setTime(prev => prev + 1);\r\n      }, 1000);\r\n    } else {\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n    }\r\n    return () => {\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n    };\r\n  }, [isRunning]);\r\n\r\n  useEffect(() => {\r\n    setTime(0);\r\n    setIsRunning(false);\r\n  }, [grid, difficulty]);\r\n\r\n  const handleChange = (e, row, col) => {\r\n    if (fixedCells[row][col]) return;\r\n\r\n    const val = e.target.value;\r\n    const newGrid = grid.map(r => r.slice());\r\n\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\r\n      setGrid(newGrid);\r\n\r\n      const conflicts = new Set();\r\n      const num = parseInt(val);\r\n      if (!num) {\r\n        setConflictCells(new Set());\r\n        return;\r\n      }\r\n\r\n      for (let c = 0; c < 9; c++) {\r\n        if (c !== col && newGrid[row][c] === num) {\r\n          conflicts.add(`${row}-${c}`);\r\n          conflicts.add(`${row}-${col}`);\r\n        }\r\n      }\r\n\r\n      for (let r = 0; r < 9; r++) {\r\n        if (r !== row && newGrid[r][col] === num) {\r\n          conflicts.add(`${r}-${col}`);\r\n          conflicts.add(`${row}-${col}`);\r\n        }\r\n      }\r\n\r\n      const boxRowStart = 3 * Math.floor(row / 3);\r\n      const boxColStart = 3 * Math.floor(col / 3);\r\n      for (let r = boxRowStart; r < boxRowStart + 3; r++) {\r\n        for (let c = boxColStart; c < boxColStart + 3; c++) {\r\n          if ((r !== row || c !== col) && newGrid[r][c] === num) {\r\n            conflicts.add(`${r}-${c}`);\r\n            conflicts.add(`${row}-${col}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      setConflictCells(conflicts);\r\n    }\r\n  };\r\n\r\n  const loadNewPuzzle = () => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setConflictCells(new Set());\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n    setConflictCells(new Set());\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map(r => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) {\r\n      setGrid(solved);\r\n      setConflictCells(new Set());\r\n    } else {\r\n      showDialog(\"No solution found!\");\r\n    }\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft === 0) {\r\n      showDialog(\"No hints left!\");\r\n      return;\r\n    }\r\n    const copyGrid = grid.map(r => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (!solved) {\r\n      showDialog(\"No solution found to provide hints!\");\r\n      return;\r\n    }\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          const newGrid = grid.map(r => r.slice());\r\n          newGrid[row][col] = solved[row][col];\r\n          setGrid(newGrid);\r\n          setHintsLeft(hintsLeft - 1);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    showDialog(\"No empty cells to give hints!\");\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\r\n    const s = (seconds % 60).toString().padStart(2, \"0\");\r\n    return `${m}:${s}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Sudoku</h1>\r\n\r\n      <div>\r\n        <label htmlFor=\"difficulty-select\">Select Difficulty: </label>\r\n        <select\r\n          id=\"difficulty-select\"\r\n          value={difficulty}\r\n          onChange={e => {\r\n            setDifficulty(e.target.value);\r\n            const newPuzzle = generateSudoku(e.target.value);\r\n            setGrid(newPuzzle.puzzle);\r\n            setFixedCells(newPuzzle.fixedCells);\r\n            setHintsLeft(3);\r\n            setConflictCells(new Set());\r\n          }}\r\n        >\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"sudoku-grid\" style={{ marginTop: \"20px\" }}>\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => {\r\n            const isFixed = fixedCells[rIdx][cIdx];\r\n            const key = `${rIdx}-${cIdx}`;\r\n            const isConflict = conflictCells.has(key);\r\n\r\n            const extraBorders = [\r\n              rIdx % 3 === 0 ? \"thick-top\" : \"\",\r\n              cIdx % 3 === 0 ? \"thick-left\" : \"\",\r\n              rIdx === 8 ? \"thick-bottom\" : \"\",\r\n              cIdx === 8 ? \"thick-right\" : \"\"\r\n            ].join(\" \");\r\n\r\n            return (\r\n              <input\r\n                key={key}\r\n                className={`cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isConflict ? \"wrong\" : \"\"}`}\r\n                maxLength=\"1\"\r\n                value={val === 0 ? \"\" : val}\r\n                onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                pattern=\"[1-9]*\"\r\n                disabled={isFixed}\r\n                autoComplete=\"off\"\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"buttons\" style={{ marginTop: \"20px\" }}>\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <div>Timer: {formatTime(time)}</div>\r\n        <button onClick={() => setIsRunning(true)} disabled={isRunning}>Start Timer</button>\r\n        <button onClick={() => setIsRunning(false)} disabled={!isRunning}>Stop Timer</button>\r\n        <button onClick={() => { setTime(0); setIsRunning(false); }}>Reset Timer</button>\r\n      </div>\r\n\r\n      {isDialogOpen && (\r\n        <div className=\"dialog-overlay\">\r\n          <div className=\"dialog-box\">\r\n            <p>{dialogMessage}</p>\r\n            <button onClick={closeDialog}>OK</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}