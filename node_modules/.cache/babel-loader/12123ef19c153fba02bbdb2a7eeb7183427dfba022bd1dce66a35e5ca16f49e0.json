{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = () => {\n  return Array(9).fill(null).map(() => Array(9).fill(null).map(() => ({\n    value: \"\",\n    readonly: false\n  })));\n};\n\n// A very simple solver function (backtracking)\nconst solveSudoku = grid => {\n  const findEmpty = () => {\n    for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        if (grid[r][c].value === \"\") return [r, c];\n      }\n    }\n    return null;\n  };\n  const isValid = (row, col, val) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i].value === val) return false; // row check\n      if (grid[i][col].value === val) return false; // col check\n      // 3x3 box check\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol].value === val) return false;\n    }\n    return true;\n  };\n  const backtrack = () => {\n    const emptyPos = findEmpty();\n    if (!emptyPos) return true;\n    const [row, col] = emptyPos;\n    for (let num = 1; num <= 9; num++) {\n      const val = num.toString();\n      if (isValid(row, col, val)) {\n        grid[row][col].value = val;\n        if (backtrack()) return true;\n        grid[row][col].value = \"\";\n      }\n    }\n    return false;\n  };\n  backtrack();\n  return grid;\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState(createEmptyGrid());\n  const [hintsLeft, setHintsLeft] = useState(3);\n\n  // Handle input change\n  const handleChange = (e, row, col) => {\n    let val = e.target.value;\n    if (val === \"\" || /^[1-9]$/.test(val)) {\n      const newGrid = grid.map(r => r.map(c => ({\n        ...c\n      })));\n      newGrid[row][col].value = val;\n      newGrid[row][col].readonly = false;\n      setGrid(newGrid);\n    }\n  };\n\n  // Load blank puzzle\n  const loadBlankPuzzle = () => {\n    setGrid(createEmptyGrid());\n    setHintsLeft(3);\n  };\n\n  // Give hint: fill one empty cell with correct value (using solver)\n  const giveHint = () => {\n    if (hintsLeft <= 0) return alert(\"No hints left!\");\n    const solvedGrid = solveSudoku(grid.map(r => r.map(c => ({\n      ...c\n    }))));\n    const newGrid = grid.map(r => r.map(c => ({\n      ...c\n    })));\n    outer: for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        if (newGrid[r][c].value === \"\") {\n          newGrid[r][c].value = solvedGrid[r][c].value;\n          newGrid[r][c].readonly = true; // Hint cells readonly\n          break outer;\n        }\n      }\n    }\n    setGrid(newGrid);\n    setHintsLeft(hintsLeft - 1);\n  };\n\n  // Solve the whole puzzle\n  const solvePuzzle = () => {\n    const solvedGrid = solveSudoku(grid.map(r => r.map(c => ({\n      ...c\n    }))));\n    setGrid(solvedGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        className: `cell ${cell.readonly ? \"readonly\" : \"\"}`,\n        type: \"text\",\n        maxLength: \"1\",\n        value: cell.value,\n        onChange: e => handleChange(e, rowIndex, colIndex),\n        disabled: cell.readonly\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solvePuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fill your puzzle, then hit Solve or get hints!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ocr0kTyiIpqlOCuV/xuSxR6D9qc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","createEmptyGrid","Array","fill","map","value","readonly","solveSudoku","grid","findEmpty","r","c","isValid","row","col","val","i","boxRow","Math","floor","boxCol","backtrack","emptyPos","num","toString","App","_s","setGrid","hintsLeft","setHintsLeft","handleChange","e","target","test","newGrid","loadBlankPuzzle","giveHint","alert","solvedGrid","outer","solvePuzzle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","colIndex","type","maxLength","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst createEmptyGrid = () => {\r\n  return Array(9)\r\n    .fill(null)\r\n    .map(() =>\r\n      Array(9)\r\n        .fill(null)\r\n        .map(() => ({ value: \"\", readonly: false }))\r\n    );\r\n};\r\n\r\n// A very simple solver function (backtracking)\r\nconst solveSudoku = (grid) => {\r\n  const findEmpty = () => {\r\n    for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (grid[r][c].value === \"\") return [r, c];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const isValid = (row, col, val) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i].value === val) return false; // row check\r\n      if (grid[i][col].value === val) return false; // col check\r\n      // 3x3 box check\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + (i % 3);\r\n      if (grid[boxRow][boxCol].value === val) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const backtrack = () => {\r\n    const emptyPos = findEmpty();\r\n    if (!emptyPos) return true;\r\n\r\n    const [row, col] = emptyPos;\r\n    for (let num = 1; num <= 9; num++) {\r\n      const val = num.toString();\r\n      if (isValid(row, col, val)) {\r\n        grid[row][col].value = val;\r\n        if (backtrack()) return true;\r\n        grid[row][col].value = \"\";\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  backtrack();\r\n  return grid;\r\n};\r\n\r\nfunction App() {\r\n  const [grid, setGrid] = useState(createEmptyGrid());\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n\r\n  // Handle input change\r\n  const handleChange = (e, row, col) => {\r\n    let val = e.target.value;\r\n    if (val === \"\" || /^[1-9]$/.test(val)) {\r\n      const newGrid = grid.map((r) => r.map((c) => ({ ...c })));\r\n      newGrid[row][col].value = val;\r\n      newGrid[row][col].readonly = false;\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  // Load blank puzzle\r\n  const loadBlankPuzzle = () => {\r\n    setGrid(createEmptyGrid());\r\n    setHintsLeft(3);\r\n  };\r\n\r\n  // Give hint: fill one empty cell with correct value (using solver)\r\n  const giveHint = () => {\r\n    if (hintsLeft <= 0) return alert(\"No hints left!\");\r\n    const solvedGrid = solveSudoku(grid.map((r) => r.map((c) => ({ ...c }))));\r\n    const newGrid = grid.map((r) => r.map((c) => ({ ...c })));\r\n    outer: for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (newGrid[r][c].value === \"\") {\r\n          newGrid[r][c].value = solvedGrid[r][c].value;\r\n          newGrid[r][c].readonly = true; // Hint cells readonly\r\n          break outer;\r\n        }\r\n      }\r\n    }\r\n    setGrid(newGrid);\r\n    setHintsLeft(hintsLeft - 1);\r\n  };\r\n\r\n  // Solve the whole puzzle\r\n  const solvePuzzle = () => {\r\n    const solvedGrid = solveSudoku(grid.map((r) => r.map((c) => ({ ...c }))));\r\n    setGrid(solvedGrid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Sudoku Solver</h1>\r\n      <div className=\"sudoku-grid\">\r\n        {grid.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => (\r\n            <input\r\n              key={`${rowIndex}-${colIndex}`}\r\n              className={`cell ${cell.readonly ? \"readonly\" : \"\"}`}\r\n              type=\"text\"\r\n              maxLength=\"1\"\r\n              value={cell.value}\r\n              onChange={(e) => handleChange(e, rowIndex, colIndex)}\r\n              disabled={cell.readonly}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solvePuzzle}>Solve</button>\r\n      </div>\r\n      <p>Fill your puzzle, then hit Solve or get hints!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}