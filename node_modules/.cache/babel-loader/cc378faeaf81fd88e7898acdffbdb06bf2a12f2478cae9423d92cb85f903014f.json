{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { generateSudoku, solveSudoku, isSafe } from \"./sudokuUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const initial = generateSudoku();\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [conflictCells, setConflictCells] = useState(new Set());\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [difficulty, setDifficulty] = useState(\"easy\");\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const timerRef = useRef(null);\n  const [dialogMessage, setDialogMessage] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const showDialog = message => {\n    setDialogMessage(message);\n    setIsDialogOpen(true);\n  };\n  const closeDialog = () => {\n    setDialogMessage(\"\");\n    setIsDialogOpen(false);\n  };\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setTime(prev => prev + 1);\n      }, 1000);\n    } else {\n      if (timerRef.current) clearInterval(timerRef.current);\n    }\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n    };\n  }, [isRunning]);\n  useEffect(() => {\n    setTime(0);\n    setIsRunning(false);\n  }, [grid, difficulty]);\n  const handleChange = (e, row, col) => {\n    if (fixedCells[row][col]) return;\n    const val = e.target.value;\n    const newGrid = grid.map(r => r.slice());\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\n      setGrid(newGrid);\n      const conflicts = new Set();\n      const num = parseInt(val);\n      if (!num) {\n        setConflictCells(new Set());\n        return;\n      }\n      for (let c = 0; c < 9; c++) {\n        if (c !== col && newGrid[row][c] === num) {\n          conflicts.add(`${row}-${c}`);\n          conflicts.add(`${row}-${col}`);\n        }\n      }\n      for (let r = 0; r < 9; r++) {\n        if (r !== row && newGrid[r][col] === num) {\n          conflicts.add(`${r}-${col}`);\n          conflicts.add(`${row}-${col}`);\n        }\n      }\n      const boxRowStart = 3 * Math.floor(row / 3);\n      const boxColStart = 3 * Math.floor(col / 3);\n      for (let r = boxRowStart; r < boxRowStart + 3; r++) {\n        for (let c = boxColStart; c < boxColStart + 3; c++) {\n          if ((r !== row || c !== col) && newGrid[r][c] === num) {\n            conflicts.add(`${r}-${c}`);\n            conflicts.add(`${row}-${col}`);\n          }\n        }\n      }\n      setConflictCells(conflicts);\n    }\n  };\n  const loadNewPuzzle = () => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setConflictCells(new Set());\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n    setConflictCells(new Set());\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) {\n      setGrid(solved);\n      setConflictCells(new Set());\n    } else {\n      showDialog(\"No solution found!\");\n    }\n  };\n  const giveHint = () => {\n    if (hintsLeft === 0) {\n      showDialog(\"No hints left!\");\n      return;\n    }\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (!solved) {\n      showDialog(\"No solution found to provide hints!\");\n      return;\n    }\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          const newGrid = grid.map(r => r.slice());\n          newGrid[row][col] = solved[row][col];\n          setGrid(newGrid);\n          setHintsLeft(hintsLeft - 1);\n          return;\n        }\n      }\n    }\n    showDialog(\"No empty cells to give hints!\");\n  };\n  const formatTime = seconds => {\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\n    const s = (seconds % 60).toString().padStart(2, \"0\");\n    return `${m}:${s}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"difficulty-select\",\n        children: \"Select Difficulty: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"difficulty-select\",\n        value: difficulty,\n        onChange: e => {\n          setDifficulty(e.target.value);\n          const newPuzzle = generateSudoku(e.target.value);\n          setGrid(newPuzzle.puzzle);\n          setFixedCells(newPuzzle.fixedCells);\n          setHintsLeft(3);\n          setConflictCells(new Set());\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"easy\",\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"hard\",\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      style: {\n        marginTop: \"20px\"\n      },\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => {\n        const isFixed = fixedCells[rIdx][cIdx];\n        const key = `${rIdx}-${cIdx}`;\n        const isConflict = conflictCells.has(key);\n        const extraBorders = [rIdx % 3 === 0 ? \"thick-top\" : \"\", cIdx % 3 === 0 ? \"thick-left\" : \"\", rIdx === 8 ? \"thick-bottom\" : \"\", cIdx === 8 ? \"thick-right\" : \"\"].join(\" \");\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isConflict ? \"wrong\" : \"\"}`,\n          maxLength: \"1\",\n          value: val === 0 ? \"\" : val,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          type: \"text\",\n          inputMode: \"numeric\",\n          pattern: \"[1-9]*\",\n          disabled: isFixed,\n          autoComplete: \"off\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Timer: \", formatTime(time)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(true),\n        disabled: isRunning,\n        children: \"Start Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(false),\n        disabled: !isRunning,\n        children: \"Stop Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setTime(0);\n          setIsRunning(false);\n        },\n        children: \"Reset Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), isDialogOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dialog-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dialog-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: dialogMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeDialog,\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AL1F4Z5GDM5YzumHUz/7GPyjjEY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","generateSudoku","solveSudoku","isSafe","jsxDEV","_jsxDEV","App","_s","initial","grid","setGrid","puzzle","fixedCells","setFixedCells","conflictCells","setConflictCells","Set","hintsLeft","setHintsLeft","difficulty","setDifficulty","time","setTime","isRunning","setIsRunning","timerRef","dialogMessage","setDialogMessage","isDialogOpen","setIsDialogOpen","showDialog","message","closeDialog","current","setInterval","prev","clearInterval","handleChange","e","row","col","val","target","value","newGrid","map","r","slice","test","length","parseInt","conflicts","num","c","add","boxRowStart","Math","floor","boxColStart","loadNewPuzzle","newPuzzle","loadBlankPuzzle","blankGrid","Array","fill","blankFixed","solveCurrentPuzzle","copyGrid","solved","giveHint","formatTime","seconds","m","toString","padStart","s","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","style","marginTop","rIdx","cIdx","isFixed","key","isConflict","has","extraBorders","join","maxLength","type","inputMode","pattern","disabled","autoComplete","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\nimport { generateSudoku, solveSudoku, isSafe } from \"./sudokuUtils\";\r\n\r\nfunction App() {\r\n  const initial = generateSudoku();\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [conflictCells, setConflictCells] = useState(new Set());\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [difficulty, setDifficulty] = useState(\"easy\");\r\n\r\n  const [time, setTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const timerRef = useRef(null);\r\n\r\n  const [dialogMessage, setDialogMessage] = useState(\"\");\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  const showDialog = (message) => {\r\n    setDialogMessage(message);\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setDialogMessage(\"\");\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setTime(prev => prev + 1);\r\n      }, 1000);\r\n    } else {\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n    }\r\n    return () => {\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n    };\r\n  }, [isRunning]);\r\n\r\n  useEffect(() => {\r\n    setTime(0);\r\n    setIsRunning(false);\r\n  }, [grid, difficulty]);\r\n\r\n  const handleChange = (e, row, col) => {\r\n    if (fixedCells[row][col]) return;\r\n\r\n    const val = e.target.value;\r\n    const newGrid = grid.map(r => r.slice());\r\n\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\r\n      setGrid(newGrid);\r\n\r\n      const conflicts = new Set();\r\n      const num = parseInt(val);\r\n      if (!num) {\r\n        setConflictCells(new Set());\r\n        return;\r\n      }\r\n\r\n      for (let c = 0; c < 9; c++) {\r\n        if (c !== col && newGrid[row][c] === num) {\r\n          conflicts.add(`${row}-${c}`);\r\n          conflicts.add(`${row}-${col}`);\r\n        }\r\n      }\r\n\r\n      for (let r = 0; r < 9; r++) {\r\n        if (r !== row && newGrid[r][col] === num) {\r\n          conflicts.add(`${r}-${col}`);\r\n          conflicts.add(`${row}-${col}`);\r\n        }\r\n      }\r\n\r\n      const boxRowStart = 3 * Math.floor(row / 3);\r\n      const boxColStart = 3 * Math.floor(col / 3);\r\n      for (let r = boxRowStart; r < boxRowStart + 3; r++) {\r\n        for (let c = boxColStart; c < boxColStart + 3; c++) {\r\n          if ((r !== row || c !== col) && newGrid[r][c] === num) {\r\n            conflicts.add(`${r}-${c}`);\r\n            conflicts.add(`${row}-${col}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      setConflictCells(conflicts);\r\n    }\r\n  };\r\n\r\n  const loadNewPuzzle = () => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setConflictCells(new Set());\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n    setConflictCells(new Set());\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map(r => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) {\r\n      setGrid(solved);\r\n      setConflictCells(new Set());\r\n    } else {\r\n      showDialog(\"No solution found!\");\r\n    }\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft === 0) {\r\n      showDialog(\"No hints left!\");\r\n      return;\r\n    }\r\n    const copyGrid = grid.map(r => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (!solved) {\r\n      showDialog(\"No solution found to provide hints!\");\r\n      return;\r\n    }\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          const newGrid = grid.map(r => r.slice());\r\n          newGrid[row][col] = solved[row][col];\r\n          setGrid(newGrid);\r\n          setHintsLeft(hintsLeft - 1);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    showDialog(\"No empty cells to give hints!\");\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\r\n    const s = (seconds % 60).toString().padStart(2, \"0\");\r\n    return `${m}:${s}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Sudoku</h1>\r\n\r\n      <div>\r\n        <label htmlFor=\"difficulty-select\">Select Difficulty: </label>\r\n        <select\r\n          id=\"difficulty-select\"\r\n          value={difficulty}\r\n          onChange={e => {\r\n            setDifficulty(e.target.value);\r\n            const newPuzzle = generateSudoku(e.target.value);\r\n            setGrid(newPuzzle.puzzle);\r\n            setFixedCells(newPuzzle.fixedCells);\r\n            setHintsLeft(3);\r\n            setConflictCells(new Set());\r\n          }}\r\n        >\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"sudoku-grid\" style={{ marginTop: \"20px\" }}>\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => {\r\n            const isFixed = fixedCells[rIdx][cIdx];\r\n            const key = `${rIdx}-${cIdx}`;\r\n            const isConflict = conflictCells.has(key);\r\n\r\n            const extraBorders = [\r\n              rIdx % 3 === 0 ? \"thick-top\" : \"\",\r\n              cIdx % 3 === 0 ? \"thick-left\" : \"\",\r\n              rIdx === 8 ? \"thick-bottom\" : \"\",\r\n              cIdx === 8 ? \"thick-right\" : \"\"\r\n            ].join(\" \");\r\n\r\n            return (\r\n              <input\r\n                key={key}\r\n                className={`cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isConflict ? \"wrong\" : \"\"}`}\r\n                maxLength=\"1\"\r\n                value={val === 0 ? \"\" : val}\r\n                onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                pattern=\"[1-9]*\"\r\n                disabled={isFixed}\r\n                autoComplete=\"off\"\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"buttons\" style={{ marginTop: \"20px\" }}>\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <div>Timer: {formatTime(time)}</div>\r\n        <button onClick={() => setIsRunning(true)} disabled={isRunning}>Start Timer</button>\r\n        <button onClick={() => setIsRunning(false)} disabled={!isRunning}>Stop Timer</button>\r\n        <button onClick={() => { setTime(0); setIsRunning(false); }}>Reset Timer</button>\r\n      </div>\r\n\r\n      {isDialogOpen && (\r\n        <div className=\"dialog-overlay\">\r\n          <div className=\"dialog-box\">\r\n            <p>{dialogMessage}</p>\r\n            <button onClick={closeDialog}>OK</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}