{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst predefinedPuzzles = [\n// Each puzzle is a 9x9 array of strings; \"\" means blank cell\n[[\"5\", \"3\", \"\", \"\", \"7\", \"\", \"\", \"\", \"\"], [\"6\", \"\", \"\", \"1\", \"9\", \"5\", \"\", \"\", \"\"], [\"\", \"9\", \"8\", \"\", \"\", \"\", \"\", \"6\", \"\"], [\"8\", \"\", \"\", \"\", \"6\", \"\", \"\", \"\", \"3\"], [\"4\", \"\", \"\", \"8\", \"\", \"3\", \"\", \"\", \"1\"], [\"7\", \"\", \"\", \"\", \"2\", \"\", \"\", \"\", \"6\"], [\"\", \"6\", \"\", \"\", \"\", \"\", \"2\", \"8\", \"\"], [\"\", \"\", \"\", \"4\", \"1\", \"9\", \"\", \"\", \"5\"], [\"\", \"\", \"\", \"\", \"8\", \"\", \"\", \"7\", \"9\"]], [[\"\", \"\", \"9\", \"\", \"\", \"7\", \"\", \"3\", \"\"], [\"5\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"1\"], [\"\", \"6\", \"\", \"3\", \"\", \"9\", \"\", \"\", \"8\"], [\"\", \"9\", \"\", \"5\", \"\", \"\", \"6\", \"\", \"\"], [\"7\", \"\", \"\", \"\", \"4\", \"\", \"\", \"\", \"3\"], [\"\", \"\", \"4\", \"\", \"\", \"3\", \"\", \"9\", \"\"], [\"8\", \"\", \"\", \"9\", \"\", \"4\", \"\", \"1\", \"\"], [\"4\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"6\"], [\"\", \"7\", \"\", \"6\", \"\", \"\", \"3\", \"\", \"\"]]];\nconst createGridFromPuzzle = puzzle => {\n  return puzzle.map(row => row.map(val => ({\n    value: val,\n    readonly: val !== \"\"\n  })));\n};\nconst createEmptyGrid = () => {\n  return Array(9).fill(null).map(() => Array(9).fill(null).map(() => ({\n    value: \"\",\n    readonly: false\n  })));\n};\n\n// Solver functions remain the same (backtracking) ...\n// [Copy solveSudoku from previous code]\n\nconst solveSudoku = grid => {\n  const findEmpty = () => {\n    for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        if (grid[r][c].value === \"\") return [r, c];\n      }\n    }\n    return null;\n  };\n  const isValid = (row, col, val) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i].value === val) return false;\n      if (grid[i][col].value === val) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol].value === val) return false;\n    }\n    return true;\n  };\n  const backtrack = () => {\n    const emptyPos = findEmpty();\n    if (!emptyPos) return true;\n    const [row, col] = emptyPos;\n    for (let num = 1; num <= 9; num++) {\n      const val = num.toString();\n      if (isValid(row, col, val)) {\n        grid[row][col].value = val;\n        if (backtrack()) return true;\n        grid[row][col].value = \"\";\n      }\n    }\n    return false;\n  };\n  backtrack();\n  return grid;\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState(createEmptyGrid());\n  const [hintsLeft, setHintsLeft] = useState(3);\n\n  // On load, pick a random puzzle\n  useEffect(() => {\n    loadRandomPuzzle();\n  }, []);\n  const loadRandomPuzzle = () => {\n    const puzzle = predefinedPuzzles[Math.floor(Math.random() * predefinedPuzzles.length)];\n    setGrid(createGridFromPuzzle(puzzle));\n    setHintsLeft(3);\n  };\n  const handleChange = (e, row, col) => {\n    let val = e.target.value;\n    if (val === \"\" || /^[1-9]$/.test(val)) {\n      const newGrid = grid.map(r => r.map(c => ({\n        ...c\n      })));\n      if (!newGrid[row][col].readonly) {\n        newGrid[row][col].value = val;\n        setGrid(newGrid);\n      }\n    }\n  };\n  const loadBlankPuzzle = () => {\n    setGrid(createEmptyGrid());\n    setHintsLeft(3);\n  };\n  const giveHint = () => {\n    if (hintsLeft <= 0) return alert(\"No hints left!\");\n    const solvedGrid = solveSudoku(grid.map(r => r.map(c => ({\n      ...c\n    }))));\n    const newGrid = grid.map(r => r.map(c => ({\n      ...c\n    })));\n    outer: for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        if (newGrid[r][c].value === \"\") {\n          newGrid[r][c].value = solvedGrid[r][c].value;\n          newGrid[r][c].readonly = true;\n          break outer;\n        }\n      }\n    }\n    setGrid(newGrid);\n    setHintsLeft(hintsLeft - 1);\n  };\n  const solvePuzzle = () => {\n    const solvedGrid = solveSudoku(grid.map(r => r.map(c => ({\n      ...c\n    }))));\n    setGrid(solvedGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        className: `cell ${cell.readonly ? \"readonly\" : \"\"}`,\n        type: \"text\",\n        maxLength: \"1\",\n        value: cell.value,\n        onChange: e => handleChange(e, rowIndex, colIndex),\n        disabled: cell.readonly\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadRandomPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solvePuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fill your puzzle, then hit Solve or get hints!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AY1wWQEQIHPfG9igeBxudg/VWKE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","predefinedPuzzles","createGridFromPuzzle","puzzle","map","row","val","value","readonly","createEmptyGrid","Array","fill","solveSudoku","grid","findEmpty","r","c","isValid","col","i","boxRow","Math","floor","boxCol","backtrack","emptyPos","num","toString","App","_s","setGrid","hintsLeft","setHintsLeft","loadRandomPuzzle","random","length","handleChange","e","target","test","newGrid","loadBlankPuzzle","giveHint","alert","solvedGrid","outer","solvePuzzle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","colIndex","type","maxLength","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst predefinedPuzzles = [\r\n  // Each puzzle is a 9x9 array of strings; \"\" means blank cell\r\n  [\r\n    [\"5\", \"3\", \"\",  \"\", \"7\", \"\",  \"\", \"\",  \"\"],\r\n    [\"6\", \"\",  \"\",  \"1\", \"9\", \"5\", \"\", \"\",  \"\"],\r\n    [\"\",  \"9\", \"8\", \"\",  \"\",  \"\",  \"\", \"6\", \"\"],\r\n    [\"8\", \"\",  \"\",  \"\",  \"6\", \"\",  \"\", \"\",  \"3\"],\r\n    [\"4\", \"\",  \"\",  \"8\", \"\",  \"3\", \"\", \"\",  \"1\"],\r\n    [\"7\", \"\",  \"\",  \"\",  \"2\", \"\",  \"\", \"\",  \"6\"],\r\n    [\"\",  \"6\", \"\",  \"\",  \"\",  \"\",  \"2\", \"8\", \"\"],\r\n    [\"\",  \"\",  \"\",  \"4\", \"1\", \"9\", \"\", \"\",  \"5\"],\r\n    [\"\",  \"\",  \"\",  \"\",  \"8\", \"\",  \"\", \"7\", \"9\"],\r\n  ],\r\n  [\r\n    [\"\", \"\", \"9\",  \"\", \"\", \"7\",  \"\", \"3\", \"\"],\r\n    [\"5\", \"\", \"\",  \"\", \"\", \"\",  \"\", \"\", \"1\"],\r\n    [\"\", \"6\", \"\",  \"3\", \"\", \"9\",  \"\", \"\", \"8\"],\r\n    [\"\", \"9\", \"\",  \"5\", \"\", \"\",  \"6\", \"\", \"\"],\r\n    [\"7\", \"\", \"\",  \"\", \"4\", \"\",  \"\", \"\", \"3\"],\r\n    [\"\", \"\", \"4\",  \"\", \"\", \"3\",  \"\", \"9\", \"\"],\r\n    [\"8\", \"\", \"\",  \"9\", \"\", \"4\",  \"\", \"1\", \"\"],\r\n    [\"4\", \"\", \"\",  \"\", \"\", \"\",  \"\", \"\", \"6\"],\r\n    [\"\", \"7\", \"\",  \"6\", \"\", \"\",  \"3\", \"\", \"\"],\r\n  ],\r\n];\r\n\r\nconst createGridFromPuzzle = (puzzle) => {\r\n  return puzzle.map((row) =>\r\n    row.map((val) => ({\r\n      value: val,\r\n      readonly: val !== \"\",\r\n    }))\r\n  );\r\n};\r\n\r\nconst createEmptyGrid = () => {\r\n  return Array(9)\r\n    .fill(null)\r\n    .map(() =>\r\n      Array(9)\r\n        .fill(null)\r\n        .map(() => ({ value: \"\", readonly: false }))\r\n    );\r\n};\r\n\r\n// Solver functions remain the same (backtracking) ...\r\n// [Copy solveSudoku from previous code]\r\n\r\nconst solveSudoku = (grid) => {\r\n  const findEmpty = () => {\r\n    for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (grid[r][c].value === \"\") return [r, c];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const isValid = (row, col, val) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i].value === val) return false;\r\n      if (grid[i][col].value === val) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + (i % 3);\r\n      if (grid[boxRow][boxCol].value === val) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const backtrack = () => {\r\n    const emptyPos = findEmpty();\r\n    if (!emptyPos) return true;\r\n\r\n    const [row, col] = emptyPos;\r\n    for (let num = 1; num <= 9; num++) {\r\n      const val = num.toString();\r\n      if (isValid(row, col, val)) {\r\n        grid[row][col].value = val;\r\n        if (backtrack()) return true;\r\n        grid[row][col].value = \"\";\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  backtrack();\r\n  return grid;\r\n};\r\n\r\nfunction App() {\r\n  const [grid, setGrid] = useState(createEmptyGrid());\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n\r\n  // On load, pick a random puzzle\r\n  useEffect(() => {\r\n    loadRandomPuzzle();\r\n  }, []);\r\n\r\n  const loadRandomPuzzle = () => {\r\n    const puzzle = predefinedPuzzles[Math.floor(Math.random() * predefinedPuzzles.length)];\r\n    setGrid(createGridFromPuzzle(puzzle));\r\n    setHintsLeft(3);\r\n  };\r\n\r\n  const handleChange = (e, row, col) => {\r\n    let val = e.target.value;\r\n    if (val === \"\" || /^[1-9]$/.test(val)) {\r\n      const newGrid = grid.map((r) => r.map((c) => ({ ...c })));\r\n      if (!newGrid[row][col].readonly) {\r\n        newGrid[row][col].value = val;\r\n        setGrid(newGrid);\r\n      }\r\n    }\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    setGrid(createEmptyGrid());\r\n    setHintsLeft(3);\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft <= 0) return alert(\"No hints left!\");\r\n    const solvedGrid = solveSudoku(grid.map((r) => r.map((c) => ({ ...c }))));\r\n    const newGrid = grid.map((r) => r.map((c) => ({ ...c })));\r\n    outer: for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (newGrid[r][c].value === \"\") {\r\n          newGrid[r][c].value = solvedGrid[r][c].value;\r\n          newGrid[r][c].readonly = true;\r\n          break outer;\r\n        }\r\n      }\r\n    }\r\n    setGrid(newGrid);\r\n    setHintsLeft(hintsLeft - 1);\r\n  };\r\n\r\n  const solvePuzzle = () => {\r\n    const solvedGrid = solveSudoku(grid.map((r) => r.map((c) => ({ ...c }))));\r\n    setGrid(solvedGrid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Sudoku Solver</h1>\r\n      <div className=\"sudoku-grid\">\r\n        {grid.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => (\r\n            <input\r\n              key={`${rowIndex}-${colIndex}`}\r\n              className={`cell ${cell.readonly ? \"readonly\" : \"\"}`}\r\n              type=\"text\"\r\n              maxLength=\"1\"\r\n              value={cell.value}\r\n              onChange={(e) => handleChange(e, rowIndex, colIndex)}\r\n              disabled={cell.readonly}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button onClick={loadRandomPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solvePuzzle}>Solve</button>\r\n      </div>\r\n      <p>Fill your puzzle, then hit Solve or get hints!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}