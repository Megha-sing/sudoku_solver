{"ast":null,"code":"// sudokuUtils.js\n\nexport const isSafe = (grid, row, col, num) => {\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nexport const solveSudoku = grid => {\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isSafe(grid, row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\nconst countSolutions = grid => {\n  let count = 0;\n  const trySolve = g => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (g[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isSafe(g, row, col, num)) {\n              g[row][col] = num;\n              trySolve(g);\n              g[row][col] = 0;\n              if (++count > 1) return;\n            }\n          }\n          return;\n        }\n      }\n    }\n  };\n  trySolve(grid.map(r => [...r]));\n  return count;\n};\nconst generateFullBoard = () => {\n  const grid = Array.from({\n    length: 9\n  }, () => Array(9).fill(0));\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9].sort(() => Math.random() - 0.5);\n  const fill = (row = 0, col = 0) => {\n    if (row === 9) return true;\n    const nextRow = col === 8 ? row + 1 : row;\n    const nextCol = col === 8 ? 0 : col + 1;\n    for (let i = 0; i < numbers.length; i++) {\n      const num = numbers[i];\n      if (isSafe(grid, row, col, num)) {\n        grid[row][col] = num;\n        if (fill(nextRow, nextCol)) return true;\n        grid[row][col] = 0;\n      }\n    }\n    return false;\n  };\n  fill();\n  return grid;\n};\nexport const generateSudoku = (difficulty = \"easy\") => {\n  const fullBoard = generateFullBoard();\n  const puzzle = fullBoard.map(r => [...r]);\n  let clues;\n  switch (difficulty) {\n    case \"easy\":\n      clues = 40;\n      break;\n    case \"medium\":\n      clues = 32;\n      break;\n    case \"hard\":\n      clues = 24;\n      break;\n    default:\n      clues = 32;\n  }\n  let cellsToRemove = 81 - clues;\n  while (cellsToRemove > 0) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    if (puzzle[row][col] === 0) continue;\n    const backup = puzzle[row][col];\n    puzzle[row][col] = 0;\n    const solutions = countSolutions(puzzle);\n    if (solutions !== 1) {\n      puzzle[row][col] = backup;\n    } else {\n      cellsToRemove--;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(cell => cell !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};","map":{"version":3,"names":["isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","solve","countSolutions","count","trySolve","g","map","r","generateFullBoard","Array","from","length","fill","numbers","sort","random","nextRow","nextCol","generateSudoku","difficulty","fullBoard","puzzle","clues","cellsToRemove","backup","solutions","fixedCells","cell"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/sudokuUtils.js"],"sourcesContent":["// sudokuUtils.js\r\n\r\nexport const isSafe = (grid, row, col, num) => {\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const solveSudoku = (grid) => {\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isSafe(grid, row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  return solve() ? grid : null;\r\n};\r\n\r\nconst countSolutions = (grid) => {\r\n  let count = 0;\r\n  const trySolve = (g) => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (g[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isSafe(g, row, col, num)) {\r\n              g[row][col] = num;\r\n              trySolve(g);\r\n              g[row][col] = 0;\r\n              if (++count > 1) return;\r\n            }\r\n          }\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  trySolve(grid.map(r => [...r]));\r\n  return count;\r\n};\r\n\r\nconst generateFullBoard = () => {\r\n  const grid = Array.from({ length: 9 }, () => Array(9).fill(0));\r\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9].sort(() => Math.random() - 0.5);\r\n\r\n  const fill = (row = 0, col = 0) => {\r\n    if (row === 9) return true;\r\n    const nextRow = col === 8 ? row + 1 : row;\r\n    const nextCol = col === 8 ? 0 : col + 1;\r\n\r\n    for (let i = 0; i < numbers.length; i++) {\r\n      const num = numbers[i];\r\n      if (isSafe(grid, row, col, num)) {\r\n        grid[row][col] = num;\r\n        if (fill(nextRow, nextCol)) return true;\r\n        grid[row][col] = 0;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  fill();\r\n  return grid;\r\n};\r\n\r\nexport const generateSudoku = (difficulty = \"easy\") => {\r\n  const fullBoard = generateFullBoard();\r\n  const puzzle = fullBoard.map(r => [...r]);\r\n\r\n  let clues;\r\n  switch (difficulty) {\r\n    case \"easy\": clues = 40; break;\r\n    case \"medium\": clues = 32; break;\r\n    case \"hard\": clues = 24; break;\r\n    default: clues = 32;\r\n  }\r\n\r\n  let cellsToRemove = 81 - clues;\r\n\r\n  while (cellsToRemove > 0) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    if (puzzle[row][col] === 0) continue;\r\n\r\n    const backup = puzzle[row][col];\r\n    puzzle[row][col] = 0;\r\n\r\n    const solutions = countSolutions(puzzle);\r\n    if (solutions !== 1) {\r\n      puzzle[row][col] = backup;\r\n    } else {\r\n      cellsToRemove--;\r\n    }\r\n  }\r\n\r\n  const fixedCells = puzzle.map(row => row.map(cell => cell !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}