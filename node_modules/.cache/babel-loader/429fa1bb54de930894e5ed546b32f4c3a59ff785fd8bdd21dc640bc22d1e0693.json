{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\nconst generateSudoku = (difficulty = \"medium\") => {\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  // Difficulty to number of filled cells mapping\n  const fillsByDifficulty = {\n    easy: 35,\n    medium: 25,\n    hard: 15\n  };\n  const fills = fillsByDifficulty[difficulty] || 25;\n  let attempts = 0;\n  while (attempts < fills) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      attempts++;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\n\n// Checks if cell is valid (no Sudoku rule violations)\nconst isCellValid = (grid, row, col) => {\n  const val = grid[row][col];\n  if (val === 0) return true; // empty is always valid\n\n  // Check row and column\n  for (let i = 0; i < 9; i++) {\n    if (i !== col && grid[row][i] === val) return false;\n    if (i !== row && grid[i][col] === val) return false;\n  }\n\n  // Check 3x3 box\n  const boxRowStart = 3 * Math.floor(row / 3);\n  const boxColStart = 3 * Math.floor(col / 3);\n  for (let r = boxRowStart; r < boxRowStart + 3; r++) {\n    for (let c = boxColStart; c < boxColStart + 3; c++) {\n      if ((r !== row || c !== col) && grid[r][c] === val) return false;\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["React","useState","useEffect","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","difficulty","puzzle","Array","fill","map","fillsByDifficulty","easy","medium","hard","fills","attempts","random","fixedCells","val","isCellValid","boxRowStart","boxColStart","r","c"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\nconst generateSudoku = (difficulty = \"medium\") => {\r\n  const puzzle = Array(9)\r\n    .fill(0)\r\n    .map(() => Array(9).fill(0));\r\n  // Difficulty to number of filled cells mapping\r\n  const fillsByDifficulty = {\r\n    easy: 35,\r\n    medium: 25,\r\n    hard: 15,\r\n  };\r\n  const fills = fillsByDifficulty[difficulty] || 25;\r\n\r\n  let attempts = 0;\r\n  while (attempts < fills) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      attempts++;\r\n    }\r\n  }\r\n\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\n// Checks if cell is valid (no Sudoku rule violations)\r\nconst isCellValid = (grid, row, col) => {\r\n  const val = grid[row][col];\r\n  if (val === 0) return true; // empty is always valid\r\n\r\n  // Check row and column\r\n  for (let i = 0; i < 9; i++) {\r\n    if (i !== col && grid[row][i] === val) return false;\r\n    if (i !== row && grid[i][col] === val) return false;\r\n  }\r\n\r\n  // Check 3x3 box\r\n  const boxRowStart = 3 * Math.floor(row / 3);\r\n  const boxColStart = 3 * Math.floor(col / 3);\r\n\r\n  for (let r = boxRowStart; r < boxRowStart + 3; r++) {\r\n    for (let c = boxColStart; c < boxColStart + 3; c++) {\r\n      if ((r !== row || c !== col) && grid[r][c] === val) return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}