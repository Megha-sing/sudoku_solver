{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\n\n// Generate sudoku puzzle with difficulty controlling number of filled cells\nconst generateSudoku = difficulty => {\n  const attemptsMap = {\n    easy: 35,\n    medium: 25,\n    hard: 15\n  };\n  const attempts = attemptsMap[difficulty] || 15;\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  let filled = 0;\n  while (filled < attempts) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      filled++;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\nfunction App() {\n  _s();\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const initial = generateSudoku(difficulty);\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [selectedCell, setSelectedCell] = useState({\n    row: 0,\n    col: 0\n  });\n  const [wrongCells, setWrongCells] = useState(new Set());\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const timerRef = useRef(null);\n\n  // Timer effect\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setTime(prev => prev + 1);\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    return () => clearInterval(timerRef.current);\n  }, [isRunning]);\n\n  // Reset puzzle when difficulty changes\n  useEffect(() => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(false); // Timer stops on new puzzle load\n    setWrongCells(new Set());\n  }, [difficulty]);\n  const handleChange = (e, row, col) => {\n    if (fixedCells[row][col]) return;\n    const val = e.target.value;\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      const numVal = val === \"\" ? 0 : parseInt(val);\n      const newGrid = grid.map(r => r.slice());\n      newGrid[row][col] = numVal;\n\n      // Validate input and track wrong cells\n      const newWrongCells = new Set(wrongCells);\n      if (numVal !== 0 && !isSafeForCell(newGrid, row, col, numVal)) {\n        newWrongCells.add(`${row}-${col}`);\n      } else {\n        newWrongCells.delete(`${row}-${col}`);\n      }\n      setWrongCells(newWrongCells);\n      setGrid(newGrid);\n    }\n  };\n\n  // Helper to check if a number placement is valid at a specific cell (ignores that cell's own value)\n  const isSafeForCell = (grid, row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (i !== col && grid[row][i] === num) return false;\n      if (i !== row && grid[i][col] === num) return false;\n    }\n    const startRow = 3 * Math.floor(row / 3);\n    const startCol = 3 * Math.floor(col / 3);\n    for (let r = startRow; r < startRow + 3; r++) {\n      for (let c = startCol; c < startCol + 3; c++) {\n        if ((r !== row || c !== col) && grid[r][c] === num) return false;\n      }\n    }\n    return true;\n  };\n  const loadNewPuzzle = () => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(false);\n    setWrongCells(new Set());\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(false);\n    setWrongCells(new Set());\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) {\n      setGrid(solved);\n      setIsRunning(false);\n      setWrongCells(new Set());\n    } else {\n      alertDialog(\"No solution found!\");\n    }\n  };\n  const giveHint = () => {\n    if (hintsLeft === 0) {\n      alertDialog(\"No hints left!\");\n      return;\n    }\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (!solved) {\n      alertDialog(\"No solution found to provide hints!\");\n      return;\n    }\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          const newGrid = grid.map(r => r.slice());\n          newGrid[row][col] = solved[row][col];\n          setGrid(newGrid);\n          setHintsLeft(hintsLeft - 1);\n          setWrongCells(new Set()); // Hint should be correct so clear wrong cells\n          return;\n        }\n      }\n    }\n    alertDialog(\"No empty cells to give hints!\");\n  };\n\n  // Simple dialog box for alerts instead of alert popup\n  const [dialogMsg, setDialogMsg] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n  const alertDialog = msg => {\n    setDialogMsg(msg);\n    setShowDialog(true);\n  };\n  const closeDialog = () => {\n    setShowDialog(false);\n    setDialogMsg(\"\");\n  };\n\n  // Handle arrow keys to move selected cell\n  const handleKeyDown = e => {\n    e.preventDefault();\n    const {\n      row,\n      col\n    } = selectedCell;\n    switch (e.key) {\n      case \"ArrowUp\":\n        setSelectedCell({\n          row: (row + 8) % 9,\n          col\n        });\n        break;\n      case \"ArrowDown\":\n        setSelectedCell({\n          row: (row + 1) % 9,\n          col\n        });\n        break;\n      case \"ArrowLeft\":\n        setSelectedCell({\n          row,\n          col: (col + 8) % 9\n        });\n        break;\n      case \"ArrowRight\":\n        setSelectedCell({\n          row,\n          col: (col + 1) % 9\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Select cell on input focus\n  const handleFocus = (r, c) => {\n    setSelectedCell({\n      row: r,\n      col: c\n    });\n  };\n\n  // Format timer (seconds) to mm:ss\n  const formatTime = seconds => {\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\n    const s = (seconds % 60).toString().padStart(2, \"0\");\n    return `${m}:${s}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    tabIndex: 0,\n    onKeyDown: handleKeyDown,\n    style: {\n      outline: \"none\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Difficulty:\", \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: difficulty,\n          onChange: e => setDifficulty(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"easy\",\n            children: \"Easy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"medium\",\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"hard\",\n            children: \"Hard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-controls\",\n      style: {\n        marginTop: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Timer: \", formatTime(time)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(true),\n        disabled: isRunning,\n        style: {\n          marginLeft: \"10px\"\n        },\n        children: \"Start Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(false),\n        disabled: !isRunning,\n        style: {\n          marginLeft: \"5px\"\n        },\n        children: \"Stop Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setTime(0);\n          setIsRunning(false);\n        },\n        style: {\n          marginLeft: \"5px\"\n        },\n        children: \"Reset Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      style: {\n        marginTop: \"15px\"\n      },\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => {\n        const isFixed = fixedCells[rIdx][cIdx];\n        const isWrong = wrongCells.has(`${rIdx}-${cIdx}`);\n        const isSelected = selectedCell.row === rIdx && selectedCell.col === cIdx;\n\n        // Border classes for thick grid lines\n        const extraBorders = [rIdx % 3 === 0 ? \"thick-top\" : \"\", cIdx % 3 === 0 ? \"thick-left\" : \"\", rIdx === 8 ? \"thick-bottom\" : \"\", cIdx === 8 ? \"thick-right\" : \"\"].join(\" \");\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `cell ${isFixed ? \"fixed\" : \"\"} ${isWrong ? \"wrong\" : \"\"} ${extraBorders} ${isSelected ? \"selected\" : \"\"}`,\n          maxLength: \"1\",\n          value: val === 0 ? \"\" : val,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          onFocus: () => handleFocus(rIdx, cIdx),\n          type: \"text\",\n          inputMode: \"numeric\",\n          pattern: \"[1-9]*\",\n          disabled: isFixed,\n          autoComplete: \"off\",\n          spellCheck: \"false\"\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), showDialog && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dialog-overlay\",\n      onClick: closeDialog,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dialog-box\",\n        onClick: e => e.stopPropagation(),\n        role: \"dialog\",\n        \"aria-modal\": \"true\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: dialogMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeDialog,\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hTTdddfmb2O9MOuNemVRk93V6vA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","difficulty","attemptsMap","easy","medium","hard","attempts","puzzle","Array","fill","map","filled","random","fixedCells","val","App","_s","setDifficulty","initial","setGrid","setFixedCells","hintsLeft","setHintsLeft","selectedCell","setSelectedCell","wrongCells","setWrongCells","Set","time","setTime","isRunning","setIsRunning","timerRef","current","setInterval","prev","clearInterval","newPuzzle","handleChange","e","target","value","test","length","numVal","parseInt","newGrid","r","slice","newWrongCells","isSafeForCell","add","delete","startRow","startCol","c","loadNewPuzzle","loadBlankPuzzle","blankGrid","blankFixed","solveCurrentPuzzle","copyGrid","solved","alertDialog","giveHint","dialogMsg","setDialogMsg","showDialog","setShowDialog","msg","closeDialog","handleKeyDown","preventDefault","key","handleFocus","formatTime","seconds","m","toString","padStart","s","className","tabIndex","onKeyDown","style","outline","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","marginTop","disabled","marginLeft","rIdx","cIdx","isFixed","isWrong","has","isSelected","extraBorders","join","maxLength","onFocus","type","inputMode","pattern","autoComplete","spellCheck","stopPropagation","role","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\n// Generate sudoku puzzle with difficulty controlling number of filled cells\r\nconst generateSudoku = (difficulty) => {\r\n  const attemptsMap = {\r\n    easy: 35,\r\n    medium: 25,\r\n    hard: 15,\r\n  };\r\n  const attempts = attemptsMap[difficulty] || 15;\r\n\r\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\r\n  let filled = 0;\r\n\r\n  while (filled < attempts) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      filled++;\r\n    }\r\n  }\r\n\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\nfunction App() {\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const initial = generateSudoku(difficulty);\r\n\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [selectedCell, setSelectedCell] = useState({ row: 0, col: 0 });\r\n  const [wrongCells, setWrongCells] = useState(new Set());\r\n\r\n  const [time, setTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const timerRef = useRef(null);\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setTime((prev) => prev + 1);\r\n      }, 1000);\r\n    } else if (timerRef.current) {\r\n      clearInterval(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n    return () => clearInterval(timerRef.current);\r\n  }, [isRunning]);\r\n\r\n  // Reset puzzle when difficulty changes\r\n  useEffect(() => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(false); // Timer stops on new puzzle load\r\n    setWrongCells(new Set());\r\n  }, [difficulty]);\r\n\r\n  const handleChange = (e, row, col) => {\r\n    if (fixedCells[row][col]) return;\r\n    const val = e.target.value;\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      const numVal = val === \"\" ? 0 : parseInt(val);\r\n\r\n      const newGrid = grid.map((r) => r.slice());\r\n      newGrid[row][col] = numVal;\r\n\r\n      // Validate input and track wrong cells\r\n      const newWrongCells = new Set(wrongCells);\r\n      if (numVal !== 0 && !isSafeForCell(newGrid, row, col, numVal)) {\r\n        newWrongCells.add(`${row}-${col}`);\r\n      } else {\r\n        newWrongCells.delete(`${row}-${col}`);\r\n      }\r\n      setWrongCells(newWrongCells);\r\n\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  // Helper to check if a number placement is valid at a specific cell (ignores that cell's own value)\r\n  const isSafeForCell = (grid, row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (i !== col && grid[row][i] === num) return false;\r\n      if (i !== row && grid[i][col] === num) return false;\r\n    }\r\n    const startRow = 3 * Math.floor(row / 3);\r\n    const startCol = 3 * Math.floor(col / 3);\r\n    for (let r = startRow; r < startRow + 3; r++) {\r\n      for (let c = startCol; c < startCol + 3; c++) {\r\n        if ((r !== row || c !== col) && grid[r][c] === num) return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const loadNewPuzzle = () => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(false);\r\n    setWrongCells(new Set());\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(false);\r\n    setWrongCells(new Set());\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) {\r\n      setGrid(solved);\r\n      setIsRunning(false);\r\n      setWrongCells(new Set());\r\n    } else {\r\n      alertDialog(\"No solution found!\");\r\n    }\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft === 0) {\r\n      alertDialog(\"No hints left!\");\r\n      return;\r\n    }\r\n\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n\r\n    if (!solved) {\r\n      alertDialog(\"No solution found to provide hints!\");\r\n      return;\r\n    }\r\n\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          const newGrid = grid.map((r) => r.slice());\r\n          newGrid[row][col] = solved[row][col];\r\n          setGrid(newGrid);\r\n          setHintsLeft(hintsLeft - 1);\r\n          setWrongCells(new Set()); // Hint should be correct so clear wrong cells\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    alertDialog(\"No empty cells to give hints!\");\r\n  };\r\n\r\n  // Simple dialog box for alerts instead of alert popup\r\n  const [dialogMsg, setDialogMsg] = useState(\"\");\r\n  const [showDialog, setShowDialog] = useState(false);\r\n\r\n  const alertDialog = (msg) => {\r\n    setDialogMsg(msg);\r\n    setShowDialog(true);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setShowDialog(false);\r\n    setDialogMsg(\"\");\r\n  };\r\n\r\n  // Handle arrow keys to move selected cell\r\n  const handleKeyDown = (e) => {\r\n    e.preventDefault();\r\n    const { row, col } = selectedCell;\r\n    switch (e.key) {\r\n      case \"ArrowUp\":\r\n        setSelectedCell({ row: (row + 8) % 9, col });\r\n        break;\r\n      case \"ArrowDown\":\r\n        setSelectedCell({ row: (row + 1) % 9, col });\r\n        break;\r\n      case \"ArrowLeft\":\r\n        setSelectedCell({ row, col: (col + 8) % 9 });\r\n        break;\r\n      case \"ArrowRight\":\r\n        setSelectedCell({ row, col: (col + 1) % 9 });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Select cell on input focus\r\n  const handleFocus = (r, c) => {\r\n    setSelectedCell({ row: r, col: c });\r\n  };\r\n\r\n  // Format timer (seconds) to mm:ss\r\n  const formatTime = (seconds) => {\r\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\r\n    const s = (seconds % 60).toString().padStart(2, \"0\");\r\n    return `${m}:${s}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\" tabIndex={0} onKeyDown={handleKeyDown} style={{outline: \"none\"}}>\r\n      <h1>Sudoku</h1>\r\n\r\n      <div className=\"controls\">\r\n        <label>\r\n          Difficulty:{\" \"}\r\n          <select\r\n            value={difficulty}\r\n            onChange={(e) => setDifficulty(e.target.value)}\r\n          >\r\n            <option value=\"easy\">Easy</option>\r\n            <option value=\"medium\">Medium</option>\r\n            <option value=\"hard\">Hard</option>\r\n          </select>\r\n        </label>\r\n\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n\r\n      <div className=\"timer-controls\" style={{ marginTop: \"10px\" }}>\r\n        <span>Timer: {formatTime(time)}</span>\r\n        <button\r\n          onClick={() => setIsRunning(true)}\r\n          disabled={isRunning}\r\n          style={{ marginLeft: \"10px\" }}\r\n        >\r\n          Start Timer\r\n        </button>\r\n        <button\r\n          onClick={() => setIsRunning(false)}\r\n          disabled={!isRunning}\r\n          style={{ marginLeft: \"5px\" }}\r\n        >\r\n          Stop Timer\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setTime(0);\r\n            setIsRunning(false);\r\n          }}\r\n          style={{ marginLeft: \"5px\" }}\r\n        >\r\n          Reset Timer\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"sudoku-grid\" style={{ marginTop: \"15px\" }}>\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => {\r\n            const isFixed = fixedCells[rIdx][cIdx];\r\n            const isWrong = wrongCells.has(`${rIdx}-${cIdx}`);\r\n            const isSelected =\r\n              selectedCell.row === rIdx && selectedCell.col === cIdx;\r\n\r\n            // Border classes for thick grid lines\r\n            const extraBorders = [\r\n              rIdx % 3 === 0 ? \"thick-top\" : \"\",\r\n              cIdx % 3 === 0 ? \"thick-left\" : \"\",\r\n              rIdx === 8 ? \"thick-bottom\" : \"\",\r\n              cIdx === 8 ? \"thick-right\" : \"\",\r\n            ].join(\" \");\r\n\r\n            return (\r\n              <input\r\n                key={`${rIdx}-${cIdx}`}\r\n                className={`cell ${isFixed ? \"fixed\" : \"\"} ${\r\n                  isWrong ? \"wrong\" : \"\"\r\n                } ${extraBorders} ${isSelected ? \"selected\" : \"\"}`}\r\n                maxLength=\"1\"\r\n                value={val === 0 ? \"\" : val}\r\n                onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                onFocus={() => handleFocus(rIdx, cIdx)}\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                pattern=\"[1-9]*\"\r\n                disabled={isFixed}\r\n                autoComplete=\"off\"\r\n                spellCheck=\"false\"\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      {/* Dialog box */}\r\n      {showDialog && (\r\n        <div className=\"dialog-overlay\" onClick={closeDialog}>\r\n          <div\r\n            className=\"dialog-box\"\r\n            onClick={(e) => e.stopPropagation()}\r\n            role=\"dialog\"\r\n            aria-modal=\"true\"\r\n          >\r\n            <p>{dialogMsg}</p>\r\n            <button onClick={closeDialog}>OK</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}