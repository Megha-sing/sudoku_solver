{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\nconst generateSudoku = (difficulty = \"medium\") => {\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  // Difficulty to number of filled cells mapping\n  const fillsByDifficulty = {\n    easy: 35,\n    medium: 25,\n    hard: 15\n  };\n  const fills = fillsByDifficulty[difficulty] || 25;\n  let attempts = 0;\n  while (attempts < fills) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      attempts++;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\n\n// Checks if cell is valid (no Sudoku rule violations)\nconst isCellValid = (grid, row, col) => {\n  const val = grid[row][col];\n  if (val === 0) return true; // empty is always valid\n\n  // Check row and column\n  for (let i = 0; i < 9; i++) {\n    if (i !== col && grid[row][i] === val) return false;\n    if (i !== row && grid[i][col] === val) return false;\n  }\n\n  // Check 3x3 box\n  const boxRowStart = 3 * Math.floor(row / 3);\n  const boxColStart = 3 * Math.floor(col / 3);\n  for (let r = boxRowStart; r < boxRowStart + 3; r++) {\n    for (let c = boxColStart; c < boxColStart + 3; c++) {\n      if ((r !== row || c !== col) && grid[r][c] === val) return false;\n    }\n  }\n  return true;\n};\nfunction App() {\n  _s();\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const initial = generateSudoku(difficulty);\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [selectedCell, setSelectedCell] = useState({\n    row: 0,\n    col: 0\n  });\n\n  // Timer states\n  const [time, setTime] = useState(0); // seconds\n  const [isRunning, setIsRunning] = useState(true);\n  const timerRef = useRef(null);\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setTime(prev => prev + 1);\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [isRunning]);\n  useEffect(() => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(true); // Start timer automatically on new puzzle\n  }, [difficulty]);\n\n  // Other functions (handleChange, loadNewPuzzle, loadBlankPuzzle, solveCurrentPuzzle, giveHint) \n  // - make sure to reset/set timer appropriately (e.g., start timer on new puzzle, pause on solve)\n\n  const loadNewPuzzle = () => {\n    const newPuzzle = generateSudoku(difficulty);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(true);\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n    setTime(0);\n    setIsRunning(false); // Pause timer for blank puzzle\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) {\n      setGrid(solved);\n      setIsRunning(false); // Stop timer on solve\n    } else {\n      alert(\"No solution found!\");\n    }\n  };\n\n  // Format timer mm:ss\n  const formatTime = seconds => {\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\n    const s = (seconds % 60).toString().padStart(2, \"0\");\n    return `${m}:${s}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    tabIndex: 0,\n    style: {\n      outline: \"none\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Difficulty:\\xA0\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: difficulty,\n        onChange: e => setDifficulty(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"easy\",\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"hard\",\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"1rem\",\n        fontWeight: \"bold\"\n      },\n      children: [\"Time: \", formatTime(time)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"0.5rem 0\"\n      },\n      children: isRunning ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(false),\n        children: \"Stop Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(true),\n        children: \"Start Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XmFunggYhhIEMInWVLQ85VTLVcI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","difficulty","puzzle","Array","fill","map","fillsByDifficulty","easy","medium","hard","fills","attempts","random","fixedCells","val","isCellValid","boxRowStart","boxColStart","r","c","App","_s","setDifficulty","initial","setGrid","setFixedCells","hintsLeft","setHintsLeft","selectedCell","setSelectedCell","time","setTime","isRunning","setIsRunning","timerRef","useRef","current","setInterval","prev","clearInterval","newPuzzle","loadNewPuzzle","loadBlankPuzzle","blankGrid","blankFixed","solveCurrentPuzzle","copyGrid","slice","solved","alert","formatTime","seconds","m","toString","padStart","s","className","tabIndex","style","outline","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","marginTop","fontWeight","margin","onClick","giveHint","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\nconst generateSudoku = (difficulty = \"medium\") => {\r\n  const puzzle = Array(9)\r\n    .fill(0)\r\n    .map(() => Array(9).fill(0));\r\n  // Difficulty to number of filled cells mapping\r\n  const fillsByDifficulty = {\r\n    easy: 35,\r\n    medium: 25,\r\n    hard: 15,\r\n  };\r\n  const fills = fillsByDifficulty[difficulty] || 25;\r\n\r\n  let attempts = 0;\r\n  while (attempts < fills) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      attempts++;\r\n    }\r\n  }\r\n\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\n// Checks if cell is valid (no Sudoku rule violations)\r\nconst isCellValid = (grid, row, col) => {\r\n  const val = grid[row][col];\r\n  if (val === 0) return true; // empty is always valid\r\n\r\n  // Check row and column\r\n  for (let i = 0; i < 9; i++) {\r\n    if (i !== col && grid[row][i] === val) return false;\r\n    if (i !== row && grid[i][col] === val) return false;\r\n  }\r\n\r\n  // Check 3x3 box\r\n  const boxRowStart = 3 * Math.floor(row / 3);\r\n  const boxColStart = 3 * Math.floor(col / 3);\r\n\r\n  for (let r = boxRowStart; r < boxRowStart + 3; r++) {\r\n    for (let c = boxColStart; c < boxColStart + 3; c++) {\r\n      if ((r !== row || c !== col) && grid[r][c] === val) return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nfunction App() {\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const initial = generateSudoku(difficulty);\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [selectedCell, setSelectedCell] = useState({ row: 0, col: 0 });\r\n\r\n  // Timer states\r\n  const [time, setTime] = useState(0); // seconds\r\n  const [isRunning, setIsRunning] = useState(true);\r\n  const timerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setTime((prev) => prev + 1);\r\n      }, 1000);\r\n    } else if (timerRef.current) {\r\n      clearInterval(timerRef.current);\r\n    }\r\n    return () => clearInterval(timerRef.current);\r\n  }, [isRunning]);\r\n\r\n  useEffect(() => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(true);  // Start timer automatically on new puzzle\r\n  }, [difficulty]);\r\n\r\n  // Other functions (handleChange, loadNewPuzzle, loadBlankPuzzle, solveCurrentPuzzle, giveHint) \r\n  // - make sure to reset/set timer appropriately (e.g., start timer on new puzzle, pause on solve)\r\n\r\n  const loadNewPuzzle = () => {\r\n    const newPuzzle = generateSudoku(difficulty);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n    setTime(0);\r\n    setIsRunning(false);  // Pause timer for blank puzzle\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) {\r\n      setGrid(solved);\r\n      setIsRunning(false); // Stop timer on solve\r\n    } else {\r\n      alert(\"No solution found!\");\r\n    }\r\n  };\r\n\r\n  // Format timer mm:ss\r\n  const formatTime = (seconds) => {\r\n    const m = Math.floor(seconds / 60).toString().padStart(2, \"0\");\r\n    const s = (seconds % 60).toString().padStart(2, \"0\");\r\n    return `${m}:${s}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\" tabIndex={0} style={{ outline: \"none\" }}>\r\n      <h1>Sudoku</h1>\r\n\r\n      <label>\r\n        Difficulty:&nbsp;\r\n        <select\r\n          value={difficulty}\r\n          onChange={(e) => setDifficulty(e.target.value)}\r\n        >\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n      </label>\r\n\r\n      <div style={{ marginTop: \"1rem\", fontWeight: \"bold\" }}>\r\n        Time: {formatTime(time)}\r\n      </div>\r\n\r\n      {/* Timer controls */}\r\n      <div style={{ margin: \"0.5rem 0\" }}>\r\n        {isRunning ? (\r\n          <button onClick={() => setIsRunning(false)}>Stop Timer</button>\r\n        ) : (\r\n          <button onClick={() => setIsRunning(true)}>Start Timer</button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Sudoku grid and buttons */}\r\n      {/* Your existing Sudoku grid rendering code here */}\r\n\r\n      <div className=\"buttons\">\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}