{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// Your helper functions (isSafe, solveSudoku, generateSudoku) slightly adapted for React state:\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\nconst generateSudoku = () => {\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  let attempts = 0;\n  while (attempts < 15) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      attempts++;\n    }\n  }\n  return puzzle;\n};\nfunction App() {\n  _s();\n  // grid stores numbers 0 (blank) to 9\n  const [grid, setGrid] = useState(generateSudoku());\n\n  // Handle input change - only allow numbers 1-9 or blank\n  const handleChange = (e, row, col) => {\n    const val = e.target.value;\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      const newGrid = grid.map(r => r.slice());\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\n      setGrid(newGrid);\n    }\n  };\n\n  // Load a new random puzzle\n  const loadNewPuzzle = () => {\n    setGrid(generateSudoku());\n  };\n\n  // Solve current grid\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) setGrid(solved);else alert(\"No solution found!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"cell\",\n        maxLength: \"1\",\n        value: val === 0 ? \"\" : val,\n        onChange: e => handleChange(e, rIdx, cIdx),\n        type: \"text\",\n        inputMode: \"numeric\",\n        pattern: \"[1-9]*\"\n      }, `${rIdx}-${cIdx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"iL2JrZiXeYaknQa0YedYskGBljc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","puzzle","Array","fill","map","attempts","random","App","_s","setGrid","handleChange","e","val","target","value","test","length","newGrid","r","slice","parseInt","loadNewPuzzle","solveCurrentPuzzle","copyGrid","solved","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rIdx","cIdx","maxLength","onChange","type","inputMode","pattern","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\n// Your helper functions (isSafe, solveSudoku, generateSudoku) slightly adapted for React state:\r\n\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\nconst generateSudoku = () => {\r\n  const puzzle = Array(9)\r\n    .fill(0)\r\n    .map(() => Array(9).fill(0));\r\n  let attempts = 0;\r\n  while (attempts < 15) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      attempts++;\r\n    }\r\n  }\r\n  return puzzle;\r\n};\r\n\r\nfunction App() {\r\n  // grid stores numbers 0 (blank) to 9\r\n  const [grid, setGrid] = useState(generateSudoku());\r\n\r\n  // Handle input change - only allow numbers 1-9 or blank\r\n  const handleChange = (e, row, col) => {\r\n    const val = e.target.value;\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      const newGrid = grid.map((r) => r.slice());\r\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  // Load a new random puzzle\r\n  const loadNewPuzzle = () => {\r\n    setGrid(generateSudoku());\r\n  };\r\n\r\n  // Solve current grid\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) setGrid(solved);\r\n    else alert(\"No solution found!\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Sudoku Solver</h1>\r\n      <div className=\"sudoku-grid\">\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => (\r\n            <input\r\n              key={`${rIdx}-${cIdx}`}\r\n              className=\"cell\"\r\n              maxLength=\"1\"\r\n              value={val === 0 ? \"\" : val}\r\n              onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n              type=\"text\"\r\n              inputMode=\"numeric\"\r\n              pattern=\"[1-9]*\"\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}