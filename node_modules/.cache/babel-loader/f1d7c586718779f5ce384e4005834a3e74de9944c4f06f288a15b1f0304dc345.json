{"ast":null,"code":"// sudokuUtils.js\n\n// Check if placing num at grid[row][col] is safe\nexport const isSafe = (grid, row, col, num) => {\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num) return false;\n    if (grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\n\n// Solve sudoku with backtracking, returns solved grid or null if unsolvable\nexport const solveSudoku = grid => {\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isSafe(grid, row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\n\n// Shuffle an array in-place\nconst shuffle = arr => {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n\n// Generate a fully solved Sudoku grid (backtracking + shuffle)\nconst generateFullSolution = () => {\n  const grid = Array(9).fill(0).map(() => Array(9).fill(0));\n  const fill = (row = 0, col = 0) => {\n    if (row === 9) return true;\n    if (col === 9) return fill(row + 1, 0);\n    const numbers = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    for (const num of numbers) {\n      if (isSafe(grid, row, col, num)) {\n        grid[row][col] = num;\n        if (fill(row, col + 1)) return true;\n        grid[row][col] = 0;\n      }\n    }\n    return false;\n  };\n  fill();\n  return grid;\n};\n\n// Generate Sudoku puzzle by removing numbers based on difficulty\nexport const generateSudoku = (difficulty = \"easy\") => {\n  const fullSolution = generateFullSolution();\n  const puzzle = fullSolution.map(row => row.slice());\n  let removeCount;\n  if (difficulty === \"easy\") removeCount = 30;else if (difficulty === \"medium\") removeCount = 40;else removeCount = 50;\n  while (removeCount > 0) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    if (puzzle[row][col] !== 0) {\n      puzzle[row][col] = 0;\n      removeCount--;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};","map":{"version":3,"names":["isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","solve","shuffle","arr","length","j","random","generateFullSolution","Array","fill","map","numbers","generateSudoku","difficulty","fullSolution","puzzle","slice","removeCount","fixedCells","val"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/sudokuUtils.js"],"sourcesContent":["// sudokuUtils.js\r\n\r\n// Check if placing num at grid[row][col] is safe\r\nexport const isSafe = (grid, row, col, num) => {\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num) return false;\r\n    if (grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + (i % 3);\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n// Solve sudoku with backtracking, returns solved grid or null if unsolvable\r\nexport const solveSudoku = (grid) => {\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isSafe(grid, row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\n// Shuffle an array in-place\r\nconst shuffle = (arr) => {\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n  return arr;\r\n};\r\n\r\n// Generate a fully solved Sudoku grid (backtracking + shuffle)\r\nconst generateFullSolution = () => {\r\n  const grid = Array(9).fill(0).map(() => Array(9).fill(0));\r\n\r\n  const fill = (row = 0, col = 0) => {\r\n    if (row === 9) return true;\r\n    if (col === 9) return fill(row + 1, 0);\r\n\r\n    const numbers = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n    for (const num of numbers) {\r\n      if (isSafe(grid, row, col, num)) {\r\n        grid[row][col] = num;\r\n        if (fill(row, col + 1)) return true;\r\n        grid[row][col] = 0;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  fill();\r\n  return grid;\r\n};\r\n\r\n// Generate Sudoku puzzle by removing numbers based on difficulty\r\nexport const generateSudoku = (difficulty = \"easy\") => {\r\n  const fullSolution = generateFullSolution();\r\n  const puzzle = fullSolution.map(row => row.slice());\r\n\r\n  let removeCount;\r\n  if (difficulty === \"easy\") removeCount = 30;\r\n  else if (difficulty === \"medium\") removeCount = 40;\r\n  else removeCount = 50;\r\n\r\n  while (removeCount > 0) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    if (puzzle[row][col] !== 0) {\r\n      puzzle[row][col] = 0;\r\n      removeCount--;\r\n    }\r\n  }\r\n\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}