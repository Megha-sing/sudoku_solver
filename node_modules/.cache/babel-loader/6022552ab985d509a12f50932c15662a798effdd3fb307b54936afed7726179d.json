{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\n// Utility to check if placing num is safe\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\n\n// Solver\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\n\n// Puzzle Generator with difficulty\nconst generateSudoku = (difficulty = \"easy\") => {\n  const filledCells = difficulty === \"easy\" ? 30 : difficulty === \"medium\" ? 20 : 10;\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  let attempts = 0;\n  while (attempts < filledCells) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      attempts++;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\nfunction App() {\n  _s();\n  const [difficulty, setDifficulty] = useState(\"easy\");\n  const initial = generateSudoku(difficulty);\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [focusedCell, setFocusedCell] = useState([0, 0]);\n\n  // Refs for all cells\n  const cellRefs = useRef(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => /*#__PURE__*/React.createRef())));\n\n  // Handle cell input\n  const handleChange = (e, row, col) => {\n    if (fixedCells[row][col]) return;\n    const val = e.target.value;\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      const newGrid = grid.map(r => r.slice());\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\n      setGrid(newGrid);\n    }\n  };\n  const handleKeyDown = (e, row, col) => {\n    var _cellRefs$current$new;\n    let newRow = row;\n    let newCol = col;\n    switch (e.key) {\n      case \"ArrowUp\":\n        newRow = Math.max(0, row - 1);\n        break;\n      case \"ArrowDown\":\n        newRow = Math.min(8, row + 1);\n        break;\n      case \"ArrowLeft\":\n        newCol = Math.max(0, col - 1);\n        break;\n      case \"ArrowRight\":\n        newCol = Math.min(8, col + 1);\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    (_cellRefs$current$new = cellRefs.current[newRow][newCol].current) === null || _cellRefs$current$new === void 0 ? void 0 : _cellRefs$current$new.focus();\n    setFocusedCell([newRow, newCol]);\n  };\n  const loadNewPuzzle = () => {\n    const {\n      puzzle,\n      fixedCells\n    } = generateSudoku(difficulty);\n    setGrid(puzzle);\n    setFixedCells(fixedCells);\n    setHintsLeft(3);\n    setFocusedCell([0, 0]);\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) setGrid(solved);else alert(\"No solution found!\");\n  };\n  const giveHint = () => {\n    if (hintsLeft === 0) {\n      alert(\"No hints left!\");\n      return;\n    }\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (!solved) {\n      alert(\"No solution found to provide hints!\");\n      return;\n    }\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          const newGrid = grid.map(r => r.slice());\n          newGrid[row][col] = solved[row][col];\n          setGrid(newGrid);\n          setHintsLeft(hintsLeft - 1);\n          return;\n        }\n      }\n    }\n    alert(\"No empty cells to give hints!\");\n  };\n\n  // Refresh puzzle when difficulty changes\n  useEffect(() => {\n    loadNewPuzzle();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [difficulty]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Difficulty: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: difficulty,\n        onChange: e => setDifficulty(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"easy\",\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"hard\",\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => {\n        const isFixed = fixedCells[rIdx][cIdx];\n        const extraBorders = [rIdx % 3 === 0 ? \"thick-top\" : \"\", cIdx % 3 === 0 ? \"thick-left\" : \"\", rIdx === 8 ? \"thick-bottom\" : \"\", cIdx === 8 ? \"thick-right\" : \"\"].join(\" \");\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders}`,\n          maxLength: \"1\",\n          value: val === 0 ? \"\" : val,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          onKeyDown: e => handleKeyDown(e, rIdx, cIdx),\n          onFocus: () => setFocusedCell([rIdx, cIdx]),\n          type: \"text\",\n          inputMode: \"numeric\",\n          pattern: \"[1-9]*\",\n          disabled: isFixed,\n          ref: cellRefs.current[rIdx][cIdx]\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNewPuzzle,\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cMSyIKTGn6AidPwOIezkfToaKCs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","difficulty","filledCells","puzzle","Array","fill","map","attempts","random","fixedCells","val","App","_s","setDifficulty","initial","setGrid","setFixedCells","hintsLeft","setHintsLeft","focusedCell","setFocusedCell","cellRefs","from","length","createRef","handleChange","e","target","value","test","newGrid","r","slice","parseInt","handleKeyDown","_cellRefs$current$new","newRow","newCol","key","max","min","preventDefault","current","focus","loadNewPuzzle","loadBlankPuzzle","blankGrid","blankFixed","solveCurrentPuzzle","copyGrid","solved","alert","giveHint","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","rIdx","cIdx","isFixed","extraBorders","join","maxLength","onKeyDown","onFocus","type","inputMode","pattern","disabled","ref","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\n// Utility to check if placing num is safe\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n// Solver\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\n// Puzzle Generator with difficulty\r\nconst generateSudoku = (difficulty = \"easy\") => {\r\n  const filledCells =\r\n    difficulty === \"easy\" ? 30 : difficulty === \"medium\" ? 20 : 10;\r\n\r\n  const puzzle = Array(9)\r\n    .fill(0)\r\n    .map(() => Array(9).fill(0));\r\n  let attempts = 0;\r\n  while (attempts < filledCells) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      attempts++;\r\n    }\r\n  }\r\n  const fixedCells = puzzle.map((row) => row.map((val) => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\nfunction App() {\r\n  const [difficulty, setDifficulty] = useState(\"easy\");\r\n  const initial = generateSudoku(difficulty);\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [focusedCell, setFocusedCell] = useState([0, 0]);\r\n\r\n  // Refs for all cells\r\n  const cellRefs = useRef(\r\n    Array.from({ length: 9 }, () =>\r\n      Array.from({ length: 9 }, () => React.createRef())\r\n    )\r\n  );\r\n\r\n  // Handle cell input\r\n  const handleChange = (e, row, col) => {\r\n    if (fixedCells[row][col]) return;\r\n\r\n    const val = e.target.value;\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      const newGrid = grid.map((r) => r.slice());\r\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e, row, col) => {\r\n    let newRow = row;\r\n    let newCol = col;\r\n\r\n    switch (e.key) {\r\n      case \"ArrowUp\":\r\n        newRow = Math.max(0, row - 1);\r\n        break;\r\n      case \"ArrowDown\":\r\n        newRow = Math.min(8, row + 1);\r\n        break;\r\n      case \"ArrowLeft\":\r\n        newCol = Math.max(0, col - 1);\r\n        break;\r\n      case \"ArrowRight\":\r\n        newCol = Math.min(8, col + 1);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    cellRefs.current[newRow][newCol].current?.focus();\r\n    setFocusedCell([newRow, newCol]);\r\n  };\r\n\r\n  const loadNewPuzzle = () => {\r\n    const { puzzle, fixedCells } = generateSudoku(difficulty);\r\n    setGrid(puzzle);\r\n    setFixedCells(fixedCells);\r\n    setHintsLeft(3);\r\n    setFocusedCell([0, 0]);\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9)\r\n      .fill(0)\r\n      .map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9)\r\n      .fill(0)\r\n      .map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) setGrid(solved);\r\n    else alert(\"No solution found!\");\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft === 0) {\r\n      alert(\"No hints left!\");\r\n      return;\r\n    }\r\n\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n\r\n    if (!solved) {\r\n      alert(\"No solution found to provide hints!\");\r\n      return;\r\n    }\r\n\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          const newGrid = grid.map((r) => r.slice());\r\n          newGrid[row][col] = solved[row][col];\r\n          setGrid(newGrid);\r\n          setHintsLeft(hintsLeft - 1);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    alert(\"No empty cells to give hints!\");\r\n  };\r\n\r\n  // Refresh puzzle when difficulty changes\r\n  useEffect(() => {\r\n    loadNewPuzzle();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [difficulty]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Sudoku</h1>\r\n\r\n      <div className=\"difficulty\">\r\n        <label>Difficulty: </label>\r\n        <select\r\n          value={difficulty}\r\n          onChange={(e) => setDifficulty(e.target.value)}\r\n        >\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"sudoku-grid\">\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => {\r\n            const isFixed = fixedCells[rIdx][cIdx];\r\n            const extraBorders = [\r\n              rIdx % 3 === 0 ? \"thick-top\" : \"\",\r\n              cIdx % 3 === 0 ? \"thick-left\" : \"\",\r\n              rIdx === 8 ? \"thick-bottom\" : \"\",\r\n              cIdx === 8 ? \"thick-right\" : \"\",\r\n            ].join(\" \");\r\n\r\n            return (\r\n              <input\r\n                key={`${rIdx}-${cIdx}`}\r\n                className={`cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders}`}\r\n                maxLength=\"1\"\r\n                value={val === 0 ? \"\" : val}\r\n                onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                onKeyDown={(e) => handleKeyDown(e, rIdx, cIdx)}\r\n                onFocus={() => setFocusedCell([rIdx, cIdx])}\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                pattern=\"[1-9]*\"\r\n                disabled={isFixed}\r\n                ref={cellRefs.current[rIdx][cIdx]}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"buttons\">\r\n        <button onClick={loadNewPuzzle}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGA,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACtC,IAAIH,IAAI,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK;EACtC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,IAAIJ,IAAI,CAACC,GAAG,CAAC,CAACG,CAAC,CAAC,KAAKD,GAAG,IAAIH,IAAI,CAACI,CAAC,CAAC,CAACF,GAAG,CAAC,KAAKC,GAAG,EAAE,OAAO,KAAK;IAC9D,MAAME,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACN,GAAG,GAAG,CAAC,CAAC,GAAGK,IAAI,CAACC,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC;IAC1D,MAAMI,MAAM,GAAG,CAAC,GAAGF,IAAI,CAACC,KAAK,CAACL,GAAG,GAAG,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC;IAC9C,IAAIJ,IAAI,CAACK,MAAM,CAAC,CAACG,MAAM,CAAC,KAAKL,GAAG,EAAE,OAAO,KAAK;EAChD;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,MAAMM,WAAW,GAAIT,IAAI,IAAK;EAC5B,MAAMU,OAAO,GAAGA,CAACT,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;IACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAIJ,IAAI,CAACC,GAAG,CAAC,CAACG,CAAC,CAAC,KAAKD,GAAG,IAAIH,IAAI,CAACI,CAAC,CAAC,CAACF,GAAG,CAAC,KAAKC,GAAG,EAAE,OAAO,KAAK;MAC9D,MAAME,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACN,GAAG,GAAG,CAAC,CAAC,GAAGK,IAAI,CAACC,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC;MAC1D,MAAMI,MAAM,GAAG,CAAC,GAAGF,IAAI,CAACC,KAAK,CAACL,GAAG,GAAG,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC;MAC9C,IAAIJ,IAAI,CAACK,MAAM,CAAC,CAACG,MAAM,CAAC,KAAKL,GAAG,EAAE,OAAO,KAAK;IAChD;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMQ,KAAK,GAAGA,CAAA,KAAM;IAClB,KAAK,IAAIV,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,IAAIF,IAAI,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,CAAC,EAAE;UACxB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;YACjC,IAAIO,OAAO,CAACT,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC,EAAE;cAC1BH,IAAI,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGC,GAAG;cACpB,IAAIQ,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;cACxBX,IAAI,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC;YACpB;UACF;UACA,OAAO,KAAK;QACd;MACF;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAED,OAAOS,KAAK,CAAC,CAAC,GAAGX,IAAI,GAAG,IAAI;AAC9B,CAAC;;AAED;AACA,MAAMY,cAAc,GAAGA,CAACC,UAAU,GAAG,MAAM,KAAK;EAC9C,MAAMC,WAAW,GACfD,UAAU,KAAK,MAAM,GAAG,EAAE,GAAGA,UAAU,KAAK,QAAQ,GAAG,EAAE,GAAG,EAAE;EAEhE,MAAME,MAAM,GAAGC,KAAK,CAAC,CAAC,CAAC,CACpBC,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC9B,IAAIE,QAAQ,GAAG,CAAC;EAChB,OAAOA,QAAQ,GAAGL,WAAW,EAAE;IAC7B,MAAMb,GAAG,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IACzC,MAAMlB,GAAG,GAAGI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IACzC,MAAMjB,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAC7C,IAAIrB,MAAM,CAACgB,MAAM,EAAEd,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC,EAAE;MACjCY,MAAM,CAACd,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGC,GAAG;MACtBgB,QAAQ,EAAE;IACZ;EACF;EACA,MAAME,UAAU,GAAGN,MAAM,CAACG,GAAG,CAAEjB,GAAG,IAAKA,GAAG,CAACiB,GAAG,CAAEI,GAAG,IAAKA,GAAG,KAAK,CAAC,CAAC,CAAC;EACnE,OAAO;IAAEP,MAAM;IAAEM;EAAW,CAAC;AAC/B,CAAC;AAED,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACX,UAAU,EAAEY,aAAa,CAAC,GAAG/B,QAAQ,CAAC,MAAM,CAAC;EACpD,MAAMgC,OAAO,GAAGd,cAAc,CAACC,UAAU,CAAC;EAC1C,MAAM,CAACb,IAAI,EAAE2B,OAAO,CAAC,GAAGjC,QAAQ,CAACgC,OAAO,CAACX,MAAM,CAAC;EAChD,MAAM,CAACM,UAAU,EAAEO,aAAa,CAAC,GAAGlC,QAAQ,CAACgC,OAAO,CAACL,UAAU,CAAC;EAChE,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACqC,WAAW,EAAEC,cAAc,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMuC,QAAQ,GAAGtC,MAAM,CACrBqB,KAAK,CAACkB,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,MACxBnB,KAAK,CAACkB,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,mBAAM1C,KAAK,CAAC2C,SAAS,CAAC,CAAC,CACnD,CACF,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGA,CAACC,CAAC,EAAErC,GAAG,EAAEC,GAAG,KAAK;IACpC,IAAImB,UAAU,CAACpB,GAAG,CAAC,CAACC,GAAG,CAAC,EAAE;IAE1B,MAAMoB,GAAG,GAAGgB,CAAC,CAACC,MAAM,CAACC,KAAK;IAC1B,IAAIlB,GAAG,KAAK,EAAE,IAAK,SAAS,CAACmB,IAAI,CAACnB,GAAG,CAAC,IAAIA,GAAG,CAACa,MAAM,KAAK,CAAE,EAAE;MAC3D,MAAMO,OAAO,GAAG1C,IAAI,CAACkB,GAAG,CAAEyB,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;MAC1CF,OAAO,CAACzC,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGoB,GAAG,KAAK,EAAE,GAAG,CAAC,GAAGuB,QAAQ,CAACvB,GAAG,CAAC;MAClDK,OAAO,CAACe,OAAO,CAAC;IAClB;EACF,CAAC;EAED,MAAMI,aAAa,GAAGA,CAACR,CAAC,EAAErC,GAAG,EAAEC,GAAG,KAAK;IAAA,IAAA6C,qBAAA;IACrC,IAAIC,MAAM,GAAG/C,GAAG;IAChB,IAAIgD,MAAM,GAAG/C,GAAG;IAEhB,QAAQoC,CAAC,CAACY,GAAG;MACX,KAAK,SAAS;QACZF,MAAM,GAAG1C,IAAI,CAAC6C,GAAG,CAAC,CAAC,EAAElD,GAAG,GAAG,CAAC,CAAC;QAC7B;MACF,KAAK,WAAW;QACd+C,MAAM,GAAG1C,IAAI,CAAC8C,GAAG,CAAC,CAAC,EAAEnD,GAAG,GAAG,CAAC,CAAC;QAC7B;MACF,KAAK,WAAW;QACdgD,MAAM,GAAG3C,IAAI,CAAC6C,GAAG,CAAC,CAAC,EAAEjD,GAAG,GAAG,CAAC,CAAC;QAC7B;MACF,KAAK,YAAY;QACf+C,MAAM,GAAG3C,IAAI,CAAC8C,GAAG,CAAC,CAAC,EAAElD,GAAG,GAAG,CAAC,CAAC;QAC7B;MACF;QACE;IACJ;IAEAoC,CAAC,CAACe,cAAc,CAAC,CAAC;IAClB,CAAAN,qBAAA,GAAAd,QAAQ,CAACqB,OAAO,CAACN,MAAM,CAAC,CAACC,MAAM,CAAC,CAACK,OAAO,cAAAP,qBAAA,uBAAxCA,qBAAA,CAA0CQ,KAAK,CAAC,CAAC;IACjDvB,cAAc,CAAC,CAACgB,MAAM,EAAEC,MAAM,CAAC,CAAC;EAClC,CAAC;EAED,MAAMO,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAM;MAAEzC,MAAM;MAAEM;IAAW,CAAC,GAAGT,cAAc,CAACC,UAAU,CAAC;IACzDc,OAAO,CAACZ,MAAM,CAAC;IACfa,aAAa,CAACP,UAAU,CAAC;IACzBS,YAAY,CAAC,CAAC,CAAC;IACfE,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,MAAMyB,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,SAAS,GAAG1C,KAAK,CAAC,CAAC,CAAC,CACvBC,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM0C,UAAU,GAAG3C,KAAK,CAAC,CAAC,CAAC,CACxBC,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClCU,OAAO,CAAC+B,SAAS,CAAC;IAClB9B,aAAa,CAAC+B,UAAU,CAAC;IACzB7B,YAAY,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,MAAM8B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,QAAQ,GAAG7D,IAAI,CAACkB,GAAG,CAAEyB,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3C,MAAMkB,MAAM,GAAGrD,WAAW,CAACoD,QAAQ,CAAC;IACpC,IAAIC,MAAM,EAAEnC,OAAO,CAACmC,MAAM,CAAC,CAAC,KACvBC,KAAK,CAAC,oBAAoB,CAAC;EAClC,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAInC,SAAS,KAAK,CAAC,EAAE;MACnBkC,KAAK,CAAC,gBAAgB,CAAC;MACvB;IACF;IAEA,MAAMF,QAAQ,GAAG7D,IAAI,CAACkB,GAAG,CAAEyB,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3C,MAAMkB,MAAM,GAAGrD,WAAW,CAACoD,QAAQ,CAAC;IAEpC,IAAI,CAACC,MAAM,EAAE;MACXC,KAAK,CAAC,qCAAqC,CAAC;MAC5C;IACF;IAEA,KAAK,IAAI9D,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,IAAIF,IAAI,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,CAAC,EAAE;UACxB,MAAMwC,OAAO,GAAG1C,IAAI,CAACkB,GAAG,CAAEyB,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;UAC1CF,OAAO,CAACzC,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG4D,MAAM,CAAC7D,GAAG,CAAC,CAACC,GAAG,CAAC;UACpCyB,OAAO,CAACe,OAAO,CAAC;UAChBZ,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;UAC3B;QACF;MACF;IACF;IACAkC,KAAK,CAAC,+BAA+B,CAAC;EACxC,CAAC;;EAED;EACAnE,SAAS,CAAC,MAAM;IACd4D,aAAa,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAAC3C,UAAU,CAAC,CAAC;EAEhB,oBACEf,OAAA;IAAKmE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpE,OAAA;MAAAoE,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEfxE,OAAA;MAAKmE,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBpE,OAAA;QAAAoE,QAAA,EAAO;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC3BxE,OAAA;QACE0C,KAAK,EAAE3B,UAAW;QAClB0D,QAAQ,EAAGjC,CAAC,IAAKb,aAAa,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;QAAA0B,QAAA,gBAE/CpE,OAAA;UAAQ0C,KAAK,EAAC,MAAM;UAAA0B,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAClCxE,OAAA;UAAQ0C,KAAK,EAAC,QAAQ;UAAA0B,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtCxE,OAAA;UAAQ0C,KAAK,EAAC,MAAM;UAAA0B,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENxE,OAAA;MAAKmE,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzBlE,IAAI,CAACkB,GAAG,CAAC,CAACjB,GAAG,EAAEuE,IAAI,KAClBvE,GAAG,CAACiB,GAAG,CAAC,CAACI,GAAG,EAAEmD,IAAI,KAAK;QACrB,MAAMC,OAAO,GAAGrD,UAAU,CAACmD,IAAI,CAAC,CAACC,IAAI,CAAC;QACtC,MAAME,YAAY,GAAG,CACnBH,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,WAAW,GAAG,EAAE,EACjCC,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,YAAY,GAAG,EAAE,EAClCD,IAAI,KAAK,CAAC,GAAG,cAAc,GAAG,EAAE,EAChCC,IAAI,KAAK,CAAC,GAAG,aAAa,GAAG,EAAE,CAChC,CAACG,IAAI,CAAC,GAAG,CAAC;QAEX,oBACE9E,OAAA;UAEEmE,SAAS,EAAE,QAAQS,OAAO,GAAG,OAAO,GAAG,EAAE,IAAIC,YAAY,EAAG;UAC5DE,SAAS,EAAC,GAAG;UACbrC,KAAK,EAAElB,GAAG,KAAK,CAAC,GAAG,EAAE,GAAGA,GAAI;UAC5BiD,QAAQ,EAAGjC,CAAC,IAAKD,YAAY,CAACC,CAAC,EAAEkC,IAAI,EAAEC,IAAI,CAAE;UAC7CK,SAAS,EAAGxC,CAAC,IAAKQ,aAAa,CAACR,CAAC,EAAEkC,IAAI,EAAEC,IAAI,CAAE;UAC/CM,OAAO,EAAEA,CAAA,KAAM/C,cAAc,CAAC,CAACwC,IAAI,EAAEC,IAAI,CAAC,CAAE;UAC5CO,IAAI,EAAC,MAAM;UACXC,SAAS,EAAC,SAAS;UACnBC,OAAO,EAAC,QAAQ;UAChBC,QAAQ,EAAET,OAAQ;UAClBU,GAAG,EAAEnD,QAAQ,CAACqB,OAAO,CAACkB,IAAI,CAAC,CAACC,IAAI;QAAE,GAX7B,GAAGD,IAAI,IAAIC,IAAI,EAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYvB,CAAC;MAEN,CAAC,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENxE,OAAA;MAAKmE,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBpE,OAAA;QAAQuF,OAAO,EAAE7B,aAAc;QAAAU,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnDxE,OAAA;QAAQuF,OAAO,EAAE5B,eAAgB;QAAAS,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5DxE,OAAA;QAAQuF,OAAO,EAAErB,QAAS;QAAAE,QAAA,GAAC,QAAM,EAACrC,SAAS,EAAC,QAAM;MAAA;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3DxE,OAAA;QAAQuF,OAAO,EAAEzB,kBAAmB;QAAAM,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9C,EAAA,CAzKQD,GAAG;AAAA+D,EAAA,GAAH/D,GAAG;AA2KZ,eAAeA,GAAG;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}