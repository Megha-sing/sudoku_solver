{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isSafe = (grid, row, col, num) => {\n  if (grid[row][col] !== 0) return false;\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] === num || grid[i][col] === num) return false;\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\n    if (grid[boxRow][boxCol] === num) return false;\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\n      if (grid[boxRow][boxCol] === num) return false;\n    }\n    return true;\n  };\n  const solve = () => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (isValid(row, col, num)) {\n              grid[row][col] = num;\n              if (solve()) return true;\n              grid[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return solve() ? grid : null;\n};\n\n// Updated generateSudoku to take difficulty levels with varying attempts\nconst generateSudoku = (difficulty = \"medium\") => {\n  const puzzle = Array(9).fill(0).map(() => Array(9).fill(0));\n  let attemptsCount;\n  if (difficulty === \"easy\") attemptsCount = 30;else if (difficulty === \"medium\") attemptsCount = 20;else attemptsCount = 10; // hard\n\n  let attempts = 0;\n  while (attempts < attemptsCount) {\n    const row = Math.floor(Math.random() * 9);\n    const col = Math.floor(Math.random() * 9);\n    const num = Math.floor(Math.random() * 9) + 1;\n    if (isSafe(puzzle, row, col, num)) {\n      puzzle[row][col] = num;\n      attempts++;\n    }\n  }\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\n  return {\n    puzzle,\n    fixedCells\n  };\n};\nfunction App() {\n  _s();\n  const initial = generateSudoku();\n  const [grid, setGrid] = useState(initial.puzzle);\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\n  const [hintsLeft, setHintsLeft] = useState(3);\n  const [dialogMessage, setDialogMessage] = useState(\"\");\n  const [selectedCell, setSelectedCell] = useState({\n    row: 0,\n    col: 0\n  });\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const handleChange = (e, row, col) => {\n    if (fixedCells[row][col]) return;\n    const val = e.target.value;\n    if (val === \"\" || /^[1-9]$/.test(val) && val.length === 1) {\n      const newGrid = grid.map(r => r.slice());\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\n      setGrid(newGrid);\n      setSelectedCell({\n        row,\n        col\n      });\n    }\n  };\n  const loadNewPuzzle = (diff = difficulty) => {\n    const newPuzzle = generateSudoku(diff);\n    setGrid(newPuzzle.puzzle);\n    setFixedCells(newPuzzle.fixedCells);\n    setHintsLeft(3);\n    setDifficulty(diff);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n  };\n  const loadBlankPuzzle = () => {\n    const blankGrid = Array(9).fill(0).map(() => Array(9).fill(0));\n    const blankFixed = Array(9).fill(0).map(() => Array(9).fill(false));\n    setGrid(blankGrid);\n    setFixedCells(blankFixed);\n    setHintsLeft(3);\n    setSelectedCell({\n      row: 0,\n      col: 0\n    });\n  };\n  const solveCurrentPuzzle = () => {\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (solved) setGrid(solved);else setDialogMessage(\"No solution found!\");\n  };\n  const giveHint = () => {\n    if (hintsLeft === 0) {\n      setDialogMessage(\"No hints left!\");\n      return;\n    }\n    const copyGrid = grid.map(r => r.slice());\n    const solved = solveSudoku(copyGrid);\n    if (!solved) {\n      setDialogMessage(\"No solution found to provide hints!\");\n      return;\n    }\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row][col] === 0) {\n          const newGrid = grid.map(r => r.slice());\n          newGrid[row][col] = solved[row][col];\n          setGrid(newGrid);\n          setHintsLeft(hintsLeft - 1);\n          setSelectedCell({\n            row,\n            col\n          });\n          return;\n        }\n      }\n    }\n    setDialogMessage(\"No empty cells to give hints!\");\n  };\n  const handleKeyDown = e => {\n    let {\n      row,\n      col\n    } = selectedCell;\n    if (e.key === \"ArrowUp\") {\n      row = row === 0 ? 8 : row - 1;\n      setSelectedCell({\n        row,\n        col\n      });\n    } else if (e.key === \"ArrowDown\") {\n      row = row === 8 ? 0 : row + 1;\n      setSelectedCell({\n        row,\n        col\n      });\n    } else if (e.key === \"ArrowLeft\") {\n      col = col === 0 ? 8 : col - 1;\n      setSelectedCell({\n        row,\n        col\n      });\n    } else if (e.key === \"ArrowRight\") {\n      col = col === 8 ? 0 : col + 1;\n      setSelectedCell({\n        row,\n        col\n      });\n    }\n  };\n\n  // To focus on the selected input cell\n  React.useEffect(() => {\n    const id = `cell-${selectedCell.row}-${selectedCell.col}`;\n    const el = document.getElementById(id);\n    if (el) el.focus();\n  }, [selectedCell]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    onKeyDown: handleKeyDown,\n    tabIndex: 0,\n    style: {\n      outline: \"none\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty-selector\",\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Difficulty:\", \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: difficulty,\n          onChange: e => loadNewPuzzle(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"easy\",\n            children: \"Easy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"medium\",\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"hard\",\n            children: \"Hard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid.map((row, rIdx) => row.map((val, cIdx) => {\n        const isFixed = fixedCells[rIdx][cIdx];\n        const extraBorders = [rIdx % 3 === 0 ? \"thick-top\" : \"\", cIdx % 3 === 0 ? \"thick-left\" : \"\", rIdx === 8 ? \"thick-bottom\" : \"\", cIdx === 8 ? \"thick-right\" : \"\"].join(\" \");\n        const isSelected = selectedCell.row === rIdx && selectedCell.col === cIdx;\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          id: `cell-${rIdx}-${cIdx}`,\n          className: `cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isSelected ? \"selected\" : \"\"}`,\n          maxLength: \"1\",\n          value: val === 0 ? \"\" : val,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          type: \"text\",\n          inputMode: \"numeric\",\n          pattern: \"[1-9]*\",\n          disabled: isFixed,\n          onClick: () => setSelectedCell({\n            row: rIdx,\n            col: cIdx\n          }),\n          autoComplete: \"off\"\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      style: {\n        marginTop: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => loadNewPuzzle(difficulty),\n        children: \"New Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadBlankPuzzle,\n        children: \"Load Blank Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: giveHint,\n        children: [\"Hint (\", hintsLeft, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveCurrentPuzzle,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), dialogMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dialog-overlay\",\n      onClick: () => setDialogMessage(\"\"),\n      role: \"dialog\",\n      \"aria-modal\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dialog-box\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: dialogMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDialogMessage(\"\"),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QHl9xWjv3twLOzBwVMHRwFOqzq0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","isSafe","grid","row","col","num","i","boxRow","Math","floor","boxCol","solveSudoku","isValid","solve","generateSudoku","difficulty","puzzle","Array","fill","map","attemptsCount","attempts","random","fixedCells","val","App","_s","initial","setGrid","setFixedCells","hintsLeft","setHintsLeft","dialogMessage","setDialogMessage","selectedCell","setSelectedCell","setDifficulty","handleChange","e","target","value","test","length","newGrid","r","slice","parseInt","loadNewPuzzle","diff","newPuzzle","loadBlankPuzzle","blankGrid","blankFixed","solveCurrentPuzzle","copyGrid","solved","giveHint","handleKeyDown","key","useEffect","id","el","document","getElementById","focus","className","onKeyDown","tabIndex","style","outline","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onChange","rIdx","cIdx","isFixed","extraBorders","join","isSelected","maxLength","type","inputMode","pattern","disabled","onClick","autoComplete","marginTop","role","stopPropagation","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst isSafe = (grid, row, col, num) => {\r\n  if (grid[row][col] !== 0) return false;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (grid[row][i] === num || grid[i][col] === num) return false;\r\n    const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n    const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n    if (grid[boxRow][boxCol] === num) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n  const isValid = (row, col, num) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (grid[row][i] === num || grid[i][col] === num) return false;\r\n      const boxRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const boxCol = 3 * Math.floor(col / 3) + i % 3;\r\n      if (grid[boxRow][boxCol] === num) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const solve = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          for (let num = 1; num <= 9; num++) {\r\n            if (isValid(row, col, num)) {\r\n              grid[row][col] = num;\r\n              if (solve()) return true;\r\n              grid[row][col] = 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return solve() ? grid : null;\r\n};\r\n\r\n// Updated generateSudoku to take difficulty levels with varying attempts\r\nconst generateSudoku = (difficulty = \"medium\") => {\r\n  const puzzle = Array(9)\r\n    .fill(0)\r\n    .map(() => Array(9).fill(0));\r\n  let attemptsCount;\r\n  if (difficulty === \"easy\") attemptsCount = 30;\r\n  else if (difficulty === \"medium\") attemptsCount = 20;\r\n  else attemptsCount = 10; // hard\r\n\r\n  let attempts = 0;\r\n  while (attempts < attemptsCount) {\r\n    const row = Math.floor(Math.random() * 9);\r\n    const col = Math.floor(Math.random() * 9);\r\n    const num = Math.floor(Math.random() * 9) + 1;\r\n    if (isSafe(puzzle, row, col, num)) {\r\n      puzzle[row][col] = num;\r\n      attempts++;\r\n    }\r\n  }\r\n  const fixedCells = puzzle.map(row => row.map(val => val !== 0));\r\n  return { puzzle, fixedCells };\r\n};\r\n\r\nfunction App() {\r\n  const initial = generateSudoku();\r\n  const [grid, setGrid] = useState(initial.puzzle);\r\n  const [fixedCells, setFixedCells] = useState(initial.fixedCells);\r\n  const [hintsLeft, setHintsLeft] = useState(3);\r\n  const [dialogMessage, setDialogMessage] = useState(\"\");\r\n  const [selectedCell, setSelectedCell] = useState({ row: 0, col: 0 });\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n\r\n  const handleChange = (e, row, col) => {\r\n    if (fixedCells[row][col]) return;\r\n    const val = e.target.value;\r\n    if (val === \"\" || (/^[1-9]$/.test(val) && val.length === 1)) {\r\n      const newGrid = grid.map((r) => r.slice());\r\n      newGrid[row][col] = val === \"\" ? 0 : parseInt(val);\r\n      setGrid(newGrid);\r\n      setSelectedCell({ row, col });\r\n    }\r\n  };\r\n\r\n  const loadNewPuzzle = (diff = difficulty) => {\r\n    const newPuzzle = generateSudoku(diff);\r\n    setGrid(newPuzzle.puzzle);\r\n    setFixedCells(newPuzzle.fixedCells);\r\n    setHintsLeft(3);\r\n    setDifficulty(diff);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n  };\r\n\r\n  const loadBlankPuzzle = () => {\r\n    const blankGrid = Array(9)\r\n      .fill(0)\r\n      .map(() => Array(9).fill(0));\r\n    const blankFixed = Array(9)\r\n      .fill(0)\r\n      .map(() => Array(9).fill(false));\r\n    setGrid(blankGrid);\r\n    setFixedCells(blankFixed);\r\n    setHintsLeft(3);\r\n    setSelectedCell({ row: 0, col: 0 });\r\n  };\r\n\r\n  const solveCurrentPuzzle = () => {\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n    if (solved) setGrid(solved);\r\n    else setDialogMessage(\"No solution found!\");\r\n  };\r\n\r\n  const giveHint = () => {\r\n    if (hintsLeft === 0) {\r\n      setDialogMessage(\"No hints left!\");\r\n      return;\r\n    }\r\n\r\n    const copyGrid = grid.map((r) => r.slice());\r\n    const solved = solveSudoku(copyGrid);\r\n\r\n    if (!solved) {\r\n      setDialogMessage(\"No solution found to provide hints!\");\r\n      return;\r\n    }\r\n\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === 0) {\r\n          const newGrid = grid.map((r) => r.slice());\r\n          newGrid[row][col] = solved[row][col];\r\n          setGrid(newGrid);\r\n          setHintsLeft(hintsLeft - 1);\r\n          setSelectedCell({ row, col });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    setDialogMessage(\"No empty cells to give hints!\");\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    let { row, col } = selectedCell;\r\n    if (e.key === \"ArrowUp\") {\r\n      row = row === 0 ? 8 : row - 1;\r\n      setSelectedCell({ row, col });\r\n    } else if (e.key === \"ArrowDown\") {\r\n      row = row === 8 ? 0 : row + 1;\r\n      setSelectedCell({ row, col });\r\n    } else if (e.key === \"ArrowLeft\") {\r\n      col = col === 0 ? 8 : col - 1;\r\n      setSelectedCell({ row, col });\r\n    } else if (e.key === \"ArrowRight\") {\r\n      col = col === 8 ? 0 : col + 1;\r\n      setSelectedCell({ row, col });\r\n    }\r\n  };\r\n\r\n  // To focus on the selected input cell\r\n  React.useEffect(() => {\r\n    const id = `cell-${selectedCell.row}-${selectedCell.col}`;\r\n    const el = document.getElementById(id);\r\n    if (el) el.focus();\r\n  }, [selectedCell]);\r\n\r\n  return (\r\n    <div className=\"app\" onKeyDown={handleKeyDown} tabIndex={0} style={{ outline: \"none\" }}>\r\n      <h1>Sudoku</h1>\r\n\r\n      {/* Difficulty selector */}\r\n      <div className=\"difficulty-selector\" style={{ marginBottom: \"10px\" }}>\r\n        <label>\r\n          Difficulty:{\" \"}\r\n          <select\r\n            value={difficulty}\r\n            onChange={(e) => loadNewPuzzle(e.target.value)}\r\n          >\r\n            <option value=\"easy\">Easy</option>\r\n            <option value=\"medium\">Medium</option>\r\n            <option value=\"hard\">Hard</option>\r\n          </select>\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"sudoku-grid\">\r\n        {grid.map((row, rIdx) =>\r\n          row.map((val, cIdx) => {\r\n            const isFixed = fixedCells[rIdx][cIdx];\r\n\r\n            const extraBorders = [\r\n              rIdx % 3 === 0 ? \"thick-top\" : \"\",\r\n              cIdx % 3 === 0 ? \"thick-left\" : \"\",\r\n              rIdx === 8 ? \"thick-bottom\" : \"\",\r\n              cIdx === 8 ? \"thick-right\" : \"\",\r\n            ].join(\" \");\r\n\r\n            const isSelected = selectedCell.row === rIdx && selectedCell.col === cIdx;\r\n\r\n            return (\r\n              <input\r\n                key={`${rIdx}-${cIdx}`}\r\n                id={`cell-${rIdx}-${cIdx}`}\r\n                className={`cell ${isFixed ? \"fixed\" : \"\"} ${extraBorders} ${isSelected ? \"selected\" : \"\"}`}\r\n                maxLength=\"1\"\r\n                value={val === 0 ? \"\" : val}\r\n                onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                pattern=\"[1-9]*\"\r\n                disabled={isFixed}\r\n                onClick={() => setSelectedCell({ row: rIdx, col: cIdx })}\r\n                autoComplete=\"off\"\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"buttons\" style={{ marginTop: \"15px\" }}>\r\n        <button onClick={() => loadNewPuzzle(difficulty)}>New Puzzle</button>\r\n        <button onClick={loadBlankPuzzle}>Load Blank Puzzle</button>\r\n        <button onClick={giveHint}>Hint ({hintsLeft} left)</button>\r\n        <button onClick={solveCurrentPuzzle}>Solve</button>\r\n      </div>\r\n\r\n      {/* Dialog box */}\r\n      {dialogMessage && (\r\n        <div\r\n          className=\"dialog-overlay\"\r\n          onClick={() => setDialogMessage(\"\")}\r\n          role=\"dialog\"\r\n          aria-modal=\"true\"\r\n        >\r\n          <div className=\"dialog-box\" onClick={(e) => e.stopPropagation()}>\r\n            <p>{dialogMessage}</p>\r\n            <button onClick={() => setDialogMessage(\"\")}>Close</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}