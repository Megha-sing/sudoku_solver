{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\sudoku_solver\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SudokuGrid from \"./SudokuGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const emptyGrid = Array(9).fill(0).map(() => Array(9).fill(\"\"));\n  const [grid, setGrid] = useState(emptyGrid);\n  const handleChange = (row, col, value) => {\n    const newGrid = [...grid];\n    if (value === \"\" || /^[1-9]$/.test(value)) {\n      newGrid[row][col] = value;\n      setGrid(newGrid);\n    }\n  };\n  const isValid = (grid, row, col, num) => {\n    for (let x = 0; x < 9; x++) {\n      if (grid[row][x] === num || grid[x][col] === num) return false;\n    }\n    const startRow = row - row % 3;\n    const startCol = col - col % 3;\n    for (let i = 0; i < 3; i++) for (let j = 0; j < 3; j++) if (grid[i + startRow][j + startCol] === num) return false;\n    return true;\n  };\n  const solveSudoku = () => {\n    const newGrid = grid.map(row => row.map(cell => cell || \"\"));\n    const solve = () => {\n      for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n          if (newGrid[row][col] === \"\") {\n            for (let num = 1; num <= 9; num++) {\n              const strNum = num.toString();\n              if (isValid(newGrid, row, col, strNum)) {\n                newGrid[row][col] = strNum;\n                if (solve()) return true;\n                newGrid[row][col] = \"\";\n              }\n            }\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n    if (solve()) {\n      setGrid(newGrid);\n    } else {\n      alert(\"No solution exists!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SudokuGrid, {\n      grid: grid,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: solveSudoku,\n      style: {\n        marginTop: \"20px\",\n        padding: \"10px 20px\"\n      },\n      children: \"Solve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6skJCq5N5NZZGzto4zZh22FWIRU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SudokuGrid","jsxDEV","_jsxDEV","App","_s","emptyGrid","Array","fill","map","grid","setGrid","handleChange","row","col","value","newGrid","test","isValid","num","x","startRow","startCol","i","j","solveSudoku","cell","solve","strNum","toString","alert","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","padding","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/sudoku_solver/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport SudokuGrid from \"./SudokuGrid\";\r\n\r\nconst App = () => {\r\n  const emptyGrid = Array(9)\r\n    .fill(0)\r\n    .map(() => Array(9).fill(\"\"));\r\n\r\n  const [grid, setGrid] = useState(emptyGrid);\r\n\r\n  const handleChange = (row, col, value) => {\r\n    const newGrid = [...grid];\r\n    if (value === \"\" || (/^[1-9]$/.test(value))) {\r\n      newGrid[row][col] = value;\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const isValid = (grid, row, col, num) => {\r\n    for (let x = 0; x < 9; x++) {\r\n      if (grid[row][x] === num || grid[x][col] === num) return false;\r\n    }\r\n\r\n    const startRow = row - (row % 3);\r\n    const startCol = col - (col % 3);\r\n\r\n    for (let i = 0; i < 3; i++)\r\n      for (let j = 0; j < 3; j++)\r\n        if (grid[i + startRow][j + startCol] === num) return false;\r\n\r\n    return true;\r\n  };\r\n\r\n  const solveSudoku = () => {\r\n    const newGrid = grid.map(row => row.map(cell => cell || \"\"));\r\n\r\n    const solve = () => {\r\n      for (let row = 0; row < 9; row++) {\r\n        for (let col = 0; col < 9; col++) {\r\n          if (newGrid[row][col] === \"\") {\r\n            for (let num = 1; num <= 9; num++) {\r\n              const strNum = num.toString();\r\n              if (isValid(newGrid, row, col, strNum)) {\r\n                newGrid[row][col] = strNum;\r\n                if (solve()) return true;\r\n                newGrid[row][col] = \"\";\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    if (solve()) {\r\n      setGrid(newGrid);\r\n    } else {\r\n      alert(\"No solution exists!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n      <h1>Sudoku Solver</h1>\r\n      <SudokuGrid grid={grid} handleChange={handleChange} />\r\n      <button onClick={solveSudoku} style={{ marginTop: \"20px\", padding: \"10px 20px\" }}>\r\n        Solve\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}